{"version":3,"file":"static/js/722.dcd3919a.chunk.js","mappings":"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","sources":["components/UI/UpdateModalFormButton.tsx","components/users/ChangePasswordForm.tsx","pages/ProfilePage.tsx"],"sourcesContent":["import OptionIcon from '../../assets/icons/OptionsIcon';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\nimport ModalFormButton from './ModalFormButton';\r\n\r\ntype Props = {\r\n  modalTitle: string | React.ReactNode;\r\n  className?: string;\r\n  btnTitle?: string | React.ReactNode;\r\n};\r\n\r\nconst UpdateModalFormButton: React.FC<Props> = (props) => {\r\n  const translations = useLangTranslation();\r\n\r\n  return (\r\n    <ModalFormButton\r\n      btnTitle={props.btnTitle ? props.btnTitle : translations?.updateLabel}\r\n      modalTitle={props.modalTitle}\r\n      btnVariant=\"warning\"\r\n      icon={<OptionIcon />}\r\n      className={props.className ? props.className : 'me-md-2'}\r\n    >\r\n      {props.children}\r\n    </ModalFormButton>\r\n  );\r\n};\r\n\r\nexport default UpdateModalFormButton;\r\n","import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Button } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\ntype Props = {\r\n  onSubmit: (values: any) => void;\r\n  onSubmitText?: string;\r\n};\r\n\r\nconst ChangePasswordForm: React.FC<Props> = (props) => {\r\n  const translations = useLangTranslation();\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        initialValues={{\r\n          currentPassword: '',\r\n          newPassword: '',\r\n          confirmNewPassword: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          currentPassword: Yup.string()\r\n            .trim()\r\n            .required(translations?.isRequiredErr),\r\n          newPassword: Yup.string()\r\n            .trim()\r\n            .required(translations?.isRequiredErr)\r\n            .min(8, translations?.passwordLengthErr)\r\n            .max(255, translations?.maxCharLengthErr)\r\n            .matches(/\\d/, translations?.passwordMustContainNumberErr)\r\n            .matches(/[a-zA-Z]/, translations?.passwordMustContainLetterErr),\r\n          confirmNewPassword: Yup.string()\r\n            .trim()\r\n            .required(translations?.isRequiredErr)\r\n            .oneOf(\r\n              [Yup.ref('newPassword')],\r\n              translations?.passwordMustMatchErr\r\n            ),\r\n        })}\r\n        onSubmit={(values) => {\r\n          props.onSubmit(values);\r\n        }}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form className={`form-floating mb-3`}>\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"currentPassword\">\r\n                  {translations?.currentPasswordLabel}\r\n                </label>\r\n                <Field\r\n                  type=\"password\"\r\n                  name=\"currentPassword\"\r\n                  className={`form-control ${\r\n                    errors.currentPassword && touched.currentPassword\r\n                      ? 'is-invalid'\r\n                      : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"currentPassword\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"newPassword\">\r\n                  {translations?.newPasswordLabel}\r\n                </label>\r\n                <Field\r\n                  type=\"password\"\r\n                  name=\"newPassword\"\r\n                  className={`form-control ${\r\n                    errors.newPassword && touched.newPassword\r\n                      ? 'is-invalid'\r\n                      : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"newPassword\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"confirmNewPassword\">\r\n                  {translations?.confirmNewPasswordLabel}\r\n                </label>\r\n                <Field\r\n                  type=\"password\"\r\n                  name=\"confirmNewPassword\"\r\n                  className={`form-control ${\r\n                    errors.confirmNewPassword && touched.confirmNewPassword\r\n                      ? 'is-invalid'\r\n                      : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"confirmNewPassword\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"text-center\">\r\n              <Button type=\"submit\" className=\"width-responsive\">\r\n                {translations?.changePasswordConfirmSubmitLabel}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordForm;\r\n","import { useContext, useState } from 'react';\r\nimport { patch } from '../api/genericApi';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport UpdateModalFormButton from '../components/UI/UpdateModalFormButton';\r\nimport ChangePasswordForm from '../components/users/ChangePasswordForm';\r\nimport UserForm from '../components/users/UserForm';\r\nimport UserInfo from '../components/users/UserInfo';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\nimport usePrivateAxios from '../hooks/usePrivateAccessTokenAxios';\r\nimport {\r\n  PatchUserDataRequest,\r\n  UserChangePasswordRequest,\r\n} from '../models/User';\r\nimport AuthContext from '../store/auth-context';\r\n\r\nconst ProfilePage: React.FC = (props) => {\r\n  const translations = useLangTranslation();\r\n  const authCtx = useContext(AuthContext);\r\n  const axiosPrivate = usePrivateAxios('/users');\r\n  const { user } = authCtx;\r\n  const [state, setState] = useState<{\r\n    type?: 'err' | 'success';\r\n    msg: string;\r\n    isLoading: boolean;\r\n  }>({\r\n    msg: '',\r\n    isLoading: false,\r\n  });\r\n\r\n  const onChangeDataHandler = async (\r\n    userId: number,\r\n    data: PatchUserDataRequest\r\n  ) => {\r\n    setState({ msg: '', isLoading: true });\r\n    try {\r\n      const res = await patch<PatchUserDataRequest>(axiosPrivate, userId, data);\r\n      authCtx.updateUserData(res);\r\n      setState({\r\n        msg: translations!.dataSuccessfullyChanged,\r\n        type: 'success',\r\n        isLoading: false,\r\n      });\r\n    } catch (err: any) {\r\n      if (err.response.data.message) {\r\n        setState({\r\n          type: 'err',\r\n          msg:\r\n            err.response.data.message === 'Invalid password'\r\n              ? translations?.invalidPassword\r\n              : err.response.data.message,\r\n          isLoading: false,\r\n        });\r\n      } else {\r\n        setState({ type: 'err', msg: err.message, isLoading: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChangePasswordHandler = async (\r\n    userId: number,\r\n    passwords: UserChangePasswordRequest\r\n  ) => {\r\n    setState({ msg: '', isLoading: true });\r\n    try {\r\n      await patch<UserChangePasswordRequest>(axiosPrivate, userId, passwords);\r\n      setState({\r\n        msg: translations!.passwordSuccessfullyChanged,\r\n        type: 'success',\r\n        isLoading: false,\r\n      });\r\n    } catch (err: any) {\r\n      if (err.response.data.message) {\r\n        setState({\r\n          type: 'err',\r\n          msg:\r\n            err.response.data.message === 'Invalid password'\r\n              ? translations?.invalidPassword\r\n              : err.response.data.message,\r\n          isLoading: false,\r\n        });\r\n      } else {\r\n        setState({ type: 'err', msg: err.message, isLoading: false });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!user) {\r\n    return <div className=\"centered\">{translations?.userNotFoundReauth}</div>;\r\n  }\r\n\r\n  const stateLoadingAndErrorOutput = (\r\n    <>\r\n      {' '}\r\n      {state.isLoading && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {state.type === 'err' && state.msg !== '' && (\r\n        <div className=\"centered error-msg\">\r\n          <p className=\"h4\">{state.msg}</p>\r\n        </div>\r\n      )}\r\n      {state.type === 'success' && state.msg !== '' && (\r\n        <div className=\"centered\">\r\n          <p className=\"h4\">{state.msg}</p>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <UserInfo user={user} header={translations?.yourProfileHeader}>\r\n      <UpdateModalFormButton\r\n        modalTitle={translations?.updateProfileModalTitle}\r\n        className={'me-md-2 width-50-991-100'}\r\n        btnTitle={translations?.updateProfileModalButtonTitle}\r\n      >\r\n        <UserForm\r\n          formData={user}\r\n          onSubmitText={translations?.updateSubmitButtonLabel}\r\n          onSubmit={(val: any) => {\r\n            onChangeDataHandler(user.id, {\r\n              email: val.email,\r\n              firstname: val.firstname,\r\n              lastname: val.lastname,\r\n              password: val.password,\r\n            });\r\n          }}\r\n        />\r\n        {stateLoadingAndErrorOutput}\r\n      </UpdateModalFormButton>\r\n\r\n      <UpdateModalFormButton\r\n        modalTitle={translations?.changePasswordModalTitle}\r\n        className={'me-md-2 width-50-991-100 mt-2'}\r\n        btnTitle={translations?.changePasswordModalButtonTitle}\r\n      >\r\n        <ChangePasswordForm\r\n          onSubmit={(values: any) => {\r\n            onChangePasswordHandler(user.id, {\r\n              password: values.currentPassword,\r\n              newPassword: values.newPassword,\r\n              confirmNewPassword: values.confirmNewPassword,\r\n            });\r\n          }}\r\n        />\r\n        {stateLoadingAndErrorOutput}\r\n      </UpdateModalFormButton>\r\n    </UserInfo>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"names":["props","translations","useLangTranslation","btnTitle","updateLabel","modalTitle","btnVariant","icon","className","children","initialValues","currentPassword","newPassword","confirmNewPassword","validationSchema","Yup","trim","required","isRequiredErr","min","passwordLengthErr","max","maxCharLengthErr","matches","passwordMustContainNumberErr","passwordMustContainLetterErr","oneOf","passwordMustMatchErr","onSubmit","values","errors","touched","htmlFor","currentPasswordLabel","type","name","msg","newPasswordLabel","confirmNewPasswordLabel","Button","changePasswordConfirmSubmitLabel","authCtx","useContext","AuthContext","axiosPrivate","usePrivateAxios","user","useState","isLoading","state","setState","onChangeDataHandler","userId","data","patch","res","updateUserData","dataSuccessfullyChanged","response","message","invalidPassword","onChangePasswordHandler","passwords","passwordSuccessfullyChanged","userNotFoundReauth","stateLoadingAndErrorOutput","LoadingSpinner","UserInfo","header","yourProfileHeader","UpdateModalFormButton","updateProfileModalTitle","updateProfileModalButtonTitle","UserForm","formData","onSubmitText","updateSubmitButtonLabel","val","id","email","firstname","lastname","password","changePasswordModalTitle","changePasswordModalButtonTitle"],"sourceRoot":""}