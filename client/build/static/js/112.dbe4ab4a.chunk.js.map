{"version":3,"file":"static/js/112.dbe4ab4a.chunk.js","mappings":"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","sources":["components/UI/DeleteDialogButton.tsx","components/tests/TestForm.tsx","components/UI/CustomField.tsx","components/tests/TestList.tsx","pages/TestListPage.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\nimport ConfirmModalDialog from './ConfirmModalDialog';\r\n\r\ntype Props = {\r\n  headerTitle?: string | React.ReactNode;\r\n  title?: string | React.ReactNode;\r\n  onDelete: () => void;\r\n  className?: string;\r\n};\r\n\r\nconst DeleteDialogButton: React.FC<Props> = (props) => {\r\n  const [isShowedDialog, setIsShowedDialog] = useState<boolean>(false);\r\n  const translations = useLangTranslation();\r\n\r\n  const hideDialogHandler = () => {\r\n    setIsShowedDialog(false);\r\n  };\r\n\r\n  const showDialogHandler = () => {\r\n    setIsShowedDialog(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ConfirmModalDialog\r\n        show={isShowedDialog}\r\n        bodyMessage={\r\n          props.headerTitle ? props.headerTitle : 'Potvrdenie vymazania topiku'\r\n        }\r\n        onHide={hideDialogHandler}\r\n        title={props.title ? props.title : 'Naozaj chcete vymazať tento topik?'}\r\n        onConfirm={props.onDelete}\r\n      />\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={showDialogHandler}\r\n        className={props.className ? props.className : 'ms-2'}\r\n      >\r\n        {translations?.deleteLabel}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteDialogButton;\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport * as Yup from 'yup';\r\nimport { Formik, Form, FieldArray, getIn } from 'formik';\r\n\r\nimport TestQuestionClass, {\r\n  TestQuestionType,\r\n} from '../../models/TestQuestionClass';\r\nimport QuestionOptionClass from '../../models/QuestionOptionClass';\r\nimport TestClass from '../../models/TestClass';\r\nimport CustomField from '../UI/CustomField';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\ntype Props = {\r\n  formField?: TestClass;\r\n  onSubmit: Function;\r\n  submitBtnText: string | React.ReactNode;\r\n  submitBtnVariant?: string;\r\n};\r\n\r\nenum FieldObjType {\r\n  QUESTION_TITLE,\r\n  QUESTION_POINTS,\r\n  QUESTION_TYPE,\r\n  OPTION_TITLE,\r\n  OPTION_CORRECT,\r\n  TEST_TITLE,\r\n}\r\n\r\nconst TestForm: React.FC<Props> = (props) => {\r\n  const translations = useLangTranslation();\r\n\r\n  const [formData, setFormData] = useState<TestClass>(\r\n    props.formField\r\n      ? props.formField\r\n      : new TestClass(1, '', -1, [\r\n          new TestQuestionClass(\r\n            Math.random(),\r\n            1,\r\n            1,\r\n            '',\r\n            TestQuestionType.INPUT,\r\n            [\r\n              new QuestionOptionClass(Math.random(), '', true),\r\n              new QuestionOptionClass(Math.random(), '', true),\r\n            ]\r\n          ),\r\n        ])\r\n  );\r\n\r\n  const addQuestionHandler = () => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      newState.questions.push(\r\n        new TestQuestionClass(\r\n          Math.random(),\r\n          newState.questions.length + 1,\r\n          1,\r\n          '',\r\n          TestQuestionType.INPUT,\r\n          [new QuestionOptionClass(Math.random(), '', true)]\r\n        )\r\n      );\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const deleteQuestionHandler = (questionId: number, setValues: Function) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      newState.questions = newState.questions.filter(\r\n        (question) => question.id !== questionId\r\n      );\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n  };\r\n\r\n  const addOptionHandler = (questionId: number) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      const questionIndex = newState.questions.findIndex(\r\n        (q) => q.id === questionId\r\n      );\r\n      newState.questions[questionIndex].options.push(\r\n        new QuestionOptionClass(\r\n          Math.random(),\r\n          '',\r\n          newState.questions[questionIndex].type === TestQuestionType.INPUT\r\n            ? true\r\n            : false\r\n        )\r\n      );\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const deleteOptionHandler = (\r\n    questionId: number,\r\n    optionId: number,\r\n    setValues: Function\r\n  ) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      const questionIndex = newState.questions.findIndex(\r\n        (q) => q.id === questionId\r\n      );\r\n      newState.questions[questionIndex].options = newState.questions[\r\n        questionIndex\r\n      ].options.filter((option) => option.id !== optionId);\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n  };\r\n\r\n  const onChangeHandler = (\r\n    event: React.FormEvent<any>,\r\n    field: FieldObjType,\r\n    fieldName: string,\r\n    setValues: Function,\r\n    handleChange: Function,\r\n    questionId?: number,\r\n    optionId?: number\r\n  ) => {\r\n    setFormData((state) => {\r\n      const value = event.currentTarget.value;\r\n      const newState = state;\r\n      if (field === FieldObjType.TEST_TITLE) newState.title = value;\r\n\r\n      if (questionId) {\r\n        const question = newState.questions.at(\r\n          newState.questions.findIndex((question) => question.id === questionId)\r\n        );\r\n        if (!question) return state;\r\n\r\n        if (optionId) {\r\n          const option = question.options.at(\r\n            question.options.findIndex((option) => option.id === optionId)\r\n          );\r\n          if (!option) return state;\r\n\r\n          if (field === FieldObjType.OPTION_TITLE) option.title = value;\r\n          if (field === FieldObjType.OPTION_CORRECT) {\r\n            if (question.type === TestQuestionType.SINGLE_CHOICE) {\r\n              question.options.forEach(\r\n                (opt) => (opt.isCorrect = opt.id === option.id ? true : false)\r\n              );\r\n            }\r\n            option.isCorrect = event.currentTarget.checked;\r\n          }\r\n        }\r\n\r\n        if (field === FieldObjType.QUESTION_TITLE) question.title = value;\r\n        if (field === FieldObjType.QUESTION_POINTS) question.points = value;\r\n\r\n        if (field === FieldObjType.QUESTION_TYPE) {\r\n          question.type = value;\r\n          // (re)set option correctness\r\n          question.options.forEach(\r\n            (option) =>\r\n              (option.isCorrect =\r\n                question.type === TestQuestionType.INPUT ? true : false)\r\n          );\r\n        }\r\n      }\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n    handleChange(fieldName);\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required(translations?.isRequiredErr),\r\n    questions: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          points: Yup.number().min(1, translations?.minPointsCountErr),\r\n          title: Yup.string().required(translations?.isRequiredErr),\r\n          type: Yup.string().required(translations?.isRequiredErr),\r\n          options: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                title: Yup.string().required(translations?.isRequiredErr),\r\n                correct: Yup.boolean(),\r\n              })\r\n            )\r\n            .min(1, translations?.questionMustContainAnswerErr)\r\n            .required(translations?.isRequiredErr)\r\n            .max(6, translations?.maxAmountOfAnswersErr),\r\n        })\r\n      )\r\n      .min(1, translations?.testMustContainQuestionErr)\r\n      .required(translations?.isRequiredErr),\r\n  });\r\n\r\n  const validateHandler = (values: TestClass) => {\r\n    let errors: any = {};\r\n    try {\r\n      validationSchema.validateSync(values, { abortEarly: false });\r\n    } catch (error: any) {\r\n      errors = error.inner.reduce((errors: any, error: any) => {\r\n        return {\r\n          ...errors,\r\n          [error.path]: error.message,\r\n        };\r\n      });\r\n    } finally {\r\n      return values.questions.some((q) =>\r\n        q.options.every((o) => o.isCorrect === false)\r\n      )\r\n        ? {\r\n            ...errors,\r\n            optNotSelected: translations?.oneAnswerMustBeCorrectErr,\r\n          }\r\n        : errors;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={formData}\r\n      enableReinitialize\r\n      validateOnBlur\r\n      validate={validateHandler}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) => {\r\n        // console.log(JSON.stringify(values, null, 2));\r\n        props.onSubmit(formData);\r\n      }}\r\n    >\r\n      {({ errors, values, touched, setValues, handleChange, setErrors }) => (\r\n        <Form className=\"form\">\r\n          <div className=\"list-group-item mt-3 \">\r\n            <CustomField\r\n              label={translations?.testTitleHeader}\r\n              name={'title'}\r\n              error={errors.title && touched.title ? true : false}\r\n              placeholder={translations?.testTitlePlaceholder}\r\n              onChange={(e: any) => {\r\n                onChangeHandler(\r\n                  e,\r\n                  FieldObjType.TEST_TITLE,\r\n                  'title',\r\n                  setValues,\r\n                  handleChange\r\n                );\r\n              }}\r\n            />\r\n\r\n            {/* zero questions error message */}\r\n            {typeof errors.questions === 'string' ? (\r\n              <div className=\"centered error-msg\">\r\n                <h4>{errors.questions}</h4>\r\n              </div>\r\n            ) : null}\r\n\r\n            <FieldArray name=\"questions\">\r\n              {(arrayHelpers) =>\r\n                values.questions.map((question, questionIndex) => {\r\n                  const getError = (fieldName: string) => {\r\n                    return (\r\n                      getIn(errors, fieldName) && getIn(touched, fieldName)\r\n                    );\r\n                  };\r\n\r\n                  return (\r\n                    <div key={questionIndex}>\r\n                      <hr />\r\n                      <div className=\"list-group-item mt-3 \">\r\n                        <CustomField\r\n                          key={`Otázka ${questionIndex + 1}`}\r\n                          label={`${translations?.questionLabel} ${\r\n                            questionIndex + 1\r\n                          }`}\r\n                          name={`questions.${questionIndex}.title`}\r\n                          withCloseButton={{\r\n                            onDelete: deleteQuestionHandler.bind(\r\n                              null,\r\n                              question.id,\r\n                              setValues\r\n                            ),\r\n                          }}\r\n                          as={'textarea'}\r\n                          error={getError(`questions.${questionIndex}.title`)}\r\n                          placeholder={translations?.questionPlaceholder}\r\n                          onChange={(e: any) =>\r\n                            onChangeHandler(\r\n                              e,\r\n                              FieldObjType.QUESTION_TITLE,\r\n                              `questions.${questionIndex}.title`,\r\n                              setValues,\r\n                              handleChange,\r\n                              question.id\r\n                            )\r\n                          }\r\n                        />\r\n\r\n                        <div className=\"row mt-3\">\r\n                          <div className=\"col-12 col-md-6\">\r\n                            <div className=\"form-control\">\r\n                              <CustomField\r\n                                label={translations?.numberOfPointsLabel}\r\n                                name={`questions.${questionIndex}.points`}\r\n                                error={getError(\r\n                                  `questions.${questionIndex}.points`\r\n                                )}\r\n                                className={'mb-2'}\r\n                                type={'number'}\r\n                                placeholder={'1'}\r\n                                onChange={(e: any) =>\r\n                                  onChangeHandler(\r\n                                    e,\r\n                                    FieldObjType.QUESTION_POINTS,\r\n                                    `questions.${questionIndex}.points`,\r\n                                    setValues,\r\n                                    handleChange,\r\n                                    question.id\r\n                                  )\r\n                                }\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col mt-sm-3 mt-md-0\">\r\n                            <div className=\"form-control\">\r\n                              <CustomField\r\n                                name={`questions.${questionIndex}.type`}\r\n                                label={translations?.questionTypeLabel}\r\n                                as=\"select\"\r\n                                className={'mb-2'}\r\n                                error={getError(\r\n                                  `questions.${questionIndex}.type`\r\n                                )}\r\n                                onChange={(e: any) =>\r\n                                  onChangeHandler(\r\n                                    e,\r\n                                    FieldObjType.QUESTION_TYPE,\r\n                                    `questions.${questionIndex}.type`,\r\n                                    setValues,\r\n                                    handleChange,\r\n                                    question.id\r\n                                  )\r\n                                }\r\n                              >\r\n                                <option value={TestQuestionType.INPUT}>\r\n                                  {translations?.questionTextInputType}\r\n                                </option>\r\n                                <option value={TestQuestionType.SINGLE_CHOICE}>\r\n                                  {translations?.questionSingleOptionType}\r\n                                </option>\r\n                                <option\r\n                                  value={TestQuestionType.MULTIPLE_CHOICES}\r\n                                >\r\n                                  {translations?.questionMultipleOptionsType}\r\n                                </option>\r\n                              </CustomField>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* zero options error message */}\r\n                        {typeof getIn(\r\n                          errors,\r\n                          `questions.${questionIndex}.options`\r\n                        ) === 'string' ? (\r\n                          <div className=\"centered error-msg\">\r\n                            <h4>\r\n                              {getIn(\r\n                                errors,\r\n                                `questions.${questionIndex}.options`\r\n                              )}\r\n                            </h4>\r\n                          </div>\r\n                        ) : null}\r\n\r\n                        <FieldArray name={`questions.${questionIndex}.options`}>\r\n                          {(arrayHelpers) =>\r\n                            question.options.map((option, optionIndex) => {\r\n                              return (\r\n                                <div key={option.id} className=\"mt-3 mb-4\">\r\n                                  <div className=\"list-group-item\">\r\n                                    <div className=\"form-group\">\r\n                                      <CustomField\r\n                                        name={`questions.${questionIndex}.options.${optionIndex}.title`}\r\n                                        withCloseButton={{\r\n                                          onDelete: deleteOptionHandler.bind(\r\n                                            null,\r\n                                            question.id,\r\n                                            option.id,\r\n                                            setValues\r\n                                          ),\r\n                                        }}\r\n                                        label={`${translations?.answerLabel} ${\r\n                                          optionIndex + 1\r\n                                        }`}\r\n                                        onChange={(e: any) => {\r\n                                          onChangeHandler(\r\n                                            e,\r\n                                            FieldObjType.OPTION_TITLE,\r\n                                            `questions.${questionIndex}.options.${optionIndex}.title`,\r\n                                            setValues,\r\n                                            handleChange,\r\n                                            question.id,\r\n                                            option.id\r\n                                          );\r\n                                        }}\r\n                                        error={getError(\r\n                                          `questions.${questionIndex}.options.${optionIndex}.title`\r\n                                        )}\r\n                                      />\r\n                                      <div className=\"mt-2\">\r\n                                        <label\r\n                                          htmlFor={`questions.${questionIndex}.options.${optionIndex}`}\r\n                                          className=\"me-3 form-label\"\r\n                                        >\r\n                                          {\r\n                                            translations?.correctAnswerCheckBoxLabel\r\n                                          }\r\n                                        </label>\r\n                                        {\r\n                                          <input\r\n                                            name={`option${questionIndex}`}\r\n                                            id={`questions.${questionIndex}.options.${optionIndex}`}\r\n                                            type={`${\r\n                                              question.type ===\r\n                                                TestQuestionType.MULTIPLE_CHOICES ||\r\n                                              question.type ===\r\n                                                TestQuestionType.INPUT\r\n                                                ? 'checkbox'\r\n                                                : 'radio'\r\n                                            }`}\r\n                                            checked={option.isCorrect}\r\n                                            disabled={\r\n                                              question.type ===\r\n                                              TestQuestionType.INPUT\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            onClick={(e) => {\r\n                                              if (\r\n                                                question.type ===\r\n                                                  TestQuestionType.SINGLE_CHOICE &&\r\n                                                question.options.length > 1 &&\r\n                                                question.options.every(\r\n                                                  (opt) => opt.isCorrect\r\n                                                )\r\n                                              ) {\r\n                                                onChangeHandler(\r\n                                                  e,\r\n                                                  FieldObjType.OPTION_CORRECT,\r\n                                                  `questions.${questionIndex}.options.${optionIndex}.correct`,\r\n                                                  setValues,\r\n                                                  handleChange,\r\n                                                  question.id,\r\n                                                  option.id\r\n                                                );\r\n                                              }\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                              onChangeHandler(\r\n                                                e,\r\n                                                FieldObjType.OPTION_CORRECT,\r\n                                                `questions.${questionIndex}.options.${optionIndex}.correct`,\r\n                                                setValues,\r\n                                                handleChange,\r\n                                                question.id,\r\n                                                option.id\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                        }\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            })\r\n                          }\r\n                        </FieldArray>\r\n\r\n                        {/* no correct option selected error  */}\r\n                        {question.options.length > 0 &&\r\n                          question.options.every(\r\n                            (opt) => opt.isCorrect === false\r\n                          ) &&\r\n                          getIn(errors, `optNotSelected`) && (\r\n                            <div className=\"centered error-msg\">\r\n                              <h5>{getIn(errors, `optNotSelected`)}</h5>\r\n                            </div>\r\n                          )}\r\n\r\n                        {/* button that adds new option */}\r\n                        <div className=\"centered my-1 mb-3\">\r\n                          <Button\r\n                            className=\"width-25-991-60\"\r\n                            variant=\"secondary\"\r\n                            onClick={() => {\r\n                              addOptionHandler(question.id);\r\n                              setValues(formData);\r\n                            }}\r\n                          >\r\n                            {translations?.addAnswerLabel}\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n\r\n            {/* button that adds new question */}\r\n            <div className=\"centered mt-4 mb-3\">\r\n              <Button\r\n                className=\"width-35-991-80\"\r\n                onClick={() => {\r\n                  addQuestionHandler();\r\n                  setValues(formData);\r\n                }}\r\n              >\r\n                {translations?.addQuestionLabel}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"text-center mt-4 mb-2\">\r\n            <Button\r\n              className=\"width-50-991-100\"\r\n              type=\"submit\"\r\n              variant={`${\r\n                props.submitBtnVariant ? props.submitBtnVariant : 'success'\r\n              }`}\r\n            >\r\n              {props.submitBtnText}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default TestForm;\r\n","import { Field, ErrorMessage } from \"formik\";\r\nimport { CloseButton } from \"react-bootstrap\";\r\n\r\ntype Props = {\r\n  label: string | React.ReactNode;\r\n  name: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  className?: string;\r\n  onChange: (e: any) => void;\r\n  error?: boolean;\r\n  as?: string;\r\n  withCloseButton?: {onDelete: () => void};\r\n};\r\n\r\nconst CustomField: React.FC<Props> = (props) => {\r\n  return (\r\n    <div>\r\n      <h5 className=\"card-title\">\r\n        {props.label}\r\n        {props.withCloseButton && (\r\n          <CloseButton\r\n            className=\"float-end\"\r\n            onClick={props.withCloseButton.onDelete}\r\n          />\r\n        )}\r\n      </h5>\r\n      <Field\r\n        name={props.name}\r\n        as={props.as ? props.as : \"\"}\r\n        type={`${props.type ? props.type : \"text\"}`}\r\n        step={props.type === 'number' ? 0.5 : ''}\r\n        placeholder={props.placeholder}\r\n        className={`form-control ${props.error ? \"is-invalid\" : \"\"} ${\r\n          props.className\r\n        }`}\r\n        onChange={(e: any) => {props.onChange(e)}}\r\n      >\r\n        {props.children}\r\n      </Field>\r\n      <ErrorMessage name={props.name}>\r\n        {(msg) => <div className=\"error-msg mt-2\">{msg}</div>}\r\n      </ErrorMessage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomField;\r\n","import React, { useContext } from 'react';\r\nimport { Accordion, ListGroup } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport TestClass from '../../models/TestClass';\r\nimport { UserRole } from '../../models/User';\r\nimport TestContext from '../../store/test-context';\r\nimport ProtectedComponent from '../UI/ProtectedComponent';\r\nimport TestForm from './TestForm';\r\nimport UpdateModalFormButton from '../UI/UpdateModalFormButton';\r\nimport DeleteDialogButton from '../UI/DeleteDialogButton';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\ntype Props = {\r\n  tests: TestClass[];\r\n};\r\n\r\nconst TestList: React.FC<Props> = (props) => {\r\n  const testCtx = useContext(TestContext);\r\n  const translations = useLangTranslation();\r\n\r\n  const getMaxPointsCount = (test: TestClass): number => {\r\n    let sum = 0;\r\n    test.questions.forEach((question) => (sum += +question.points));\r\n    return sum;\r\n  };\r\n\r\n  return (\r\n    <ListGroup className=\"maxwidth-720\">\r\n      <Accordion>\r\n        {props.tests.map((test) => (\r\n          <Accordion.Item eventKey={'' + test.id} key={test.id}>\r\n            <Accordion.Header>\r\n              <p className=\"h4 m-0\">{test.title}</p>\r\n            </Accordion.Header>\r\n            <Accordion.Body>\r\n              <ProtectedComponent\r\n                requiredRole={[UserRole.ADMIN, UserRole.TEACHER]}\r\n              >\r\n                <div className=\" d-flex flex-column d-md-block float-md-end\">\r\n                  <UpdateModalFormButton\r\n                    modalTitle={translations?.testUpdateModalTitle}\r\n                  >\r\n                    <TestForm\r\n                      onSubmit={testCtx.modifyTest.bind(null, test.id)}\r\n                      submitBtnText={translations?.updateSubmitButtonLabel}\r\n                      formField={test}\r\n                    />\r\n                  </UpdateModalFormButton>\r\n                  <DeleteDialogButton\r\n                    className=\"mb-2 mt-2 mb-md-0 mt-md-0\"\r\n                    title={translations?.deleteTestModalTitle}\r\n                    headerTitle={translations?.deleteTestModalLabel}\r\n                    onDelete={testCtx.deleteTest.bind(null, test.id)}\r\n                  />\r\n                </div>\r\n              </ProtectedComponent>\r\n              <p>\r\n                {`${translations?.titleLabel}: ${test.title}`}\r\n                <br />\r\n                {`${translations?.numberOfQuestionsLabel}: ${test.questions.length}`}\r\n                <br />\r\n                {`${translations?.maxAmountOfPointsLabel}: ${getMaxPointsCount(\r\n                  test\r\n                )}`}\r\n              </p>\r\n\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  className=\"width-responsive btn btn-primary\"\r\n                  to={`/tests/${test.id}`}\r\n                >\r\n                  {translations?.takeTestLabel}\r\n                </Link>\r\n              </div>\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        ))}\r\n      </Accordion>\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport ModalLayout from '../components/Layout/ModalLayout';\r\nimport TestForm from '../components/tests/TestForm';\r\nimport TestList from '../components/tests/TestList';\r\nimport ContainerWrapper from '../components/Layout/ContainerWrapper';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport ProtectedComponent from '../components/UI/ProtectedComponent';\r\nimport TestClass from '../models/TestClass';\r\nimport { UserRole } from '../models/User';\r\nimport TestContext from '../store/test-context';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\n\r\nconst TestListPage: React.FC = () => {\r\n  const testCtx = useContext(TestContext);\r\n  const translations = useLangTranslation();\r\n\r\n  const { error, opStatus: status, tests } = testCtx.data;\r\n  const fetchAll = testCtx.fetchAll;\r\n\r\n  const [isShown, setIsShown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    fetchAll();\r\n  }, [fetchAll]);\r\n\r\n  let output;\r\n\r\n  const modalFormButton = (\r\n    <ProtectedComponent requiredRole={[UserRole.ADMIN, UserRole.TEACHER]}>\r\n      <div className=\"centered\">\r\n        <Button onClick={() => setIsShown(true)}>\r\n          {translations?.createNewTestTitle}\r\n        </Button>\r\n        <ModalLayout\r\n          title={translations?.createNewTestTitle}\r\n          backdropType={'static'}\r\n          show={isShown}\r\n          onHide={() => setIsShown(false)}\r\n        >\r\n          <TestForm\r\n            onSubmit={(data: TestClass) => {\r\n              testCtx.saveTest(data);\r\n              setIsShown(false);\r\n            }}\r\n            submitBtnText={translations?.createTestSubmitButtonTitle}\r\n          />\r\n        </ModalLayout>\r\n      </div>\r\n    </ProtectedComponent>\r\n  );\r\n\r\n  if (status === 'Pending') {\r\n    output = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || status === 'Failure') {\r\n    output = <p className=\"centered h4 error-msg\">{error}</p>;\r\n  }\r\n\r\n  if (status === 'Finished' && (!tests || tests.length === 0)) {\r\n    output = (\r\n      <>\r\n        <div className=\"centered\">\r\n          <p className=\"h4\">{translations?.noTestsFound}</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (status === 'Finished' && !error && tests && tests.length > 0) {\r\n    output = (\r\n      <>\r\n        <div className=\"maxwidth-720\">\r\n          <TestList tests={tests} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ContainerWrapper>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"centered\">\r\n            <h2 className=\"display-2 txt-main\">\r\n              {translations?.testListHeader}\r\n            </h2>\r\n          </div>\r\n          {modalFormButton}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>{output}</Col>\r\n      </Row>\r\n    </ContainerWrapper>\r\n  );\r\n};\r\n\r\nexport default TestListPage;\r\n"],"names":["props","useState","isShowedDialog","setIsShowedDialog","translations","useLangTranslation","show","bodyMessage","headerTitle","onHide","title","onConfirm","onDelete","variant","onClick","className","deleteLabel","FieldObjType","label","withCloseButton","CloseButton","name","as","type","step","placeholder","error","onChange","e","children","msg","formField","TestClass","TestQuestionClass","Math","random","TestQuestionType","QuestionOptionClass","formData","setFormData","deleteQuestionHandler","questionId","setValues","state","newState","questions","filter","question","id","deleteOptionHandler","optionId","questionIndex","findIndex","q","options","option","onChangeHandler","event","field","fieldName","handleChange","value","currentTarget","TEST_TITLE","at","OPTION_TITLE","OPTION_CORRECT","forEach","opt","isCorrect","checked","QUESTION_TITLE","QUESTION_POINTS","points","QUESTION_TYPE","validationSchema","Yup","shape","required","isRequiredErr","of","min","minPointsCountErr","correct","questionMustContainAnswerErr","max","maxAmountOfAnswersErr","testMustContainQuestionErr","initialValues","enableReinitialize","validateOnBlur","validate","values","errors","validateSync","abortEarly","inner","reduce","path","message","some","every","o","optNotSelected","oneAnswerMustBeCorrectErr","onSubmit","touched","setErrors","testTitleHeader","testTitlePlaceholder","arrayHelpers","map","getError","getIn","questionLabel","bind","questionPlaceholder","numberOfPointsLabel","questionTypeLabel","questionTextInputType","questionSingleOptionType","questionMultipleOptionsType","optionIndex","answerLabel","htmlFor","correctAnswerCheckBoxLabel","disabled","length","Button","push","addAnswerLabel","addQuestionLabel","submitBtnVariant","submitBtnText","testCtx","useContext","TestContext","getMaxPointsCount","test","sum","ListGroup","Accordion","tests","eventKey","ProtectedComponent","requiredRole","UserRole","UpdateModalFormButton","modalTitle","testUpdateModalTitle","modifyTest","updateSubmitButtonLabel","DeleteDialogButton","deleteTestModalTitle","deleteTestModalLabel","deleteTest","titleLabel","numberOfQuestionsLabel","maxAmountOfPointsLabel","to","takeTestLabel","output","data","status","opStatus","fetchAll","isShown","setIsShown","useEffect","modalFormButton","createNewTestTitle","ModalLayout","backdropType","saveTest","createTestSubmitButtonTitle","LoadingSpinner","noTestsFound","ContainerWrapper","Row","Col","testListHeader"],"sourceRoot":""}