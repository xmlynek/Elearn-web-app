{"version":3,"file":"static/js/230.9349d5f7.chunk.js","mappings":"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","sources":["components/UI/ConfirmModalDialog.tsx","components/UI/DeleteDialogButton.tsx","pages/UserPage.tsx"],"sourcesContent":["import { Modal, Button } from 'react-bootstrap';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\ntype Props = {\r\n  className?: string;\r\n  title: string | React.ReactNode;\r\n  bodyMessage: string | React.ReactNode;\r\n  show: boolean;\r\n  onHide: () => void;\r\n  onConfirm: () => void;\r\n};\r\n\r\nconst ConfirmModalDialog: React.FC<Props> = (props) => {\r\n  const translations = useLangTranslation();\r\n\r\n  return (\r\n    <Modal\r\n      className={props.className}\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      backdrop={true}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{props.title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h5>{props.bodyMessage}</h5>\r\n        {props.children}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onConfirm}>{translations?.confirmLabel}</Button>\r\n        <Button onClick={props.onHide}>{translations?.cancelLabel}</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmModalDialog;\r\n","import { useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\nimport ConfirmModalDialog from './ConfirmModalDialog';\r\n\r\ntype Props = {\r\n  headerTitle?: string | React.ReactNode;\r\n  title?: string | React.ReactNode;\r\n  onDelete: () => void;\r\n  className?: string;\r\n};\r\n\r\nconst DeleteDialogButton: React.FC<Props> = (props) => {\r\n  const [isShowedDialog, setIsShowedDialog] = useState<boolean>(false);\r\n  const translations = useLangTranslation();\r\n\r\n  const hideDialogHandler = () => {\r\n    setIsShowedDialog(false);\r\n  };\r\n\r\n  const showDialogHandler = () => {\r\n    setIsShowedDialog(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ConfirmModalDialog\r\n        show={isShowedDialog}\r\n        bodyMessage={\r\n          props.headerTitle ? props.headerTitle : 'Potvrdenie vymazania topiku'\r\n        }\r\n        onHide={hideDialogHandler}\r\n        title={props.title ? props.title : 'Naozaj chcete vymazaÅ¥ tento topik?'}\r\n        onConfirm={props.onDelete}\r\n      />\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={showDialogHandler}\r\n        className={props.className ? props.className : 'ms-2'}\r\n      >\r\n        {translations?.deleteLabel}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeleteDialogButton;\r\n","import { useContext, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport OptionIcon from '../assets/icons/OptionsIcon';\r\nimport DeleteDialogButton from '../components/UI/DeleteDialogButton';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport ModalFormButton from '../components/UI/ModalFormButton';\r\nimport ProtectedComponent from '../components/UI/ProtectedComponent';\r\nimport UserForm from '../components/users/UserForm';\r\nimport UserInfo from '../components/users/UserInfo';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\nimport { UserRequest, UserRole } from '../models/User';\r\nimport AuthContext from '../store/auth-context';\r\nimport UserContext from '../store/user-context';\r\n\r\ntype Props = {};\r\n\r\nconst UserPage: React.FC<Props> = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  const translations = useLangTranslation();\r\n  const params = useParams();\r\n  const userId = params.userId;\r\n  const navigate = useNavigate();\r\n\r\n  const userCtx = useContext(UserContext);\r\n  const { fetchById, data, updateUser, deleteUser } = userCtx;\r\n  const { opStatus: status, users, error } = data;\r\n\r\n  useEffect(() => {\r\n    if (userId && parseInt(userId) > 0) {\r\n      if (parseInt(userId) === authCtx.user?.id) {\r\n        navigate('/profile', { replace: true });\r\n      } else {\r\n        fetchById(parseInt(userId));\r\n      }\r\n    }\r\n  }, [fetchById, userId, authCtx.user?.id, navigate]);\r\n\r\n  const updateHandler = (id: any, body: UserRequest) => {\r\n    if (id && typeof id === 'string') {\r\n      updateUser(parseInt(id), body, true);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (id: any) => {\r\n    if (id && typeof id === 'string') {\r\n      deleteUser(parseInt(id));\r\n      navigate('/users', { replace: true });\r\n    }\r\n  };\r\n\r\n  if (status === 'Pending') {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (\r\n    error ||\r\n    status === 'Failure' ||\r\n    (status === 'Finished' && (!users || users.length === 0))\r\n  ) {\r\n    return (\r\n      <p className=\"centerVertical h1 bg-info py-2 px-3\">\r\n        {error === 'Request failed with status code 404'\r\n          ? `${translations?.userNotFoundWithId} ${userId}`\r\n          : error}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UserInfo user={users[0]}>\r\n        <ProtectedComponent requiredRole={[UserRole.ADMIN]}>\r\n          <ModalFormButton\r\n            btnTitle={translations?.updateProfileModalButtonTitle}\r\n            modalTitle={translations?.updateProfileModalTitle}\r\n            btnVariant=\"warning\"\r\n            icon={<OptionIcon />}\r\n            className={'me-md-2 width-50-991-100'}\r\n          >\r\n            <UserForm\r\n              allowRoleChange={true}\r\n              ignorePassword={true}\r\n              formData={users[0]}\r\n              onSubmitText={translations?.updateProfileModalButtonTitle}\r\n              onSubmit={(values: any) => {\r\n                updateHandler(userId, {\r\n                  email: values.email,\r\n                  firstname: values.firstname,\r\n                  lastname: values.lastname,\r\n                  role: values.role,\r\n                });\r\n              }}\r\n            />\r\n          </ModalFormButton>\r\n          <DeleteDialogButton\r\n            className=\"me-md-2 width-50-991-100 mt-2\"\r\n            onDelete={deleteHandler.bind(null, userId)}\r\n            title={translations?.deleteUserModalTitle}\r\n            headerTitle={translations?.deleteUserModalLabel}\r\n          />\r\n        </ProtectedComponent>\r\n      </UserInfo>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n"],"names":["props","translations","useLangTranslation","className","show","onHide","backdrop","closeButton","title","bodyMessage","children","onClick","onConfirm","confirmLabel","cancelLabel","useState","isShowedDialog","setIsShowedDialog","headerTitle","onDelete","variant","deleteLabel","authCtx","useContext","AuthContext","userId","useParams","navigate","useNavigate","userCtx","UserContext","fetchById","data","updateUser","deleteUser","status","opStatus","users","error","useEffect","parseInt","user","id","replace","length","userNotFoundWithId","requiredRole","UserRole","btnTitle","updateProfileModalButtonTitle","modalTitle","updateProfileModalTitle","btnVariant","icon","allowRoleChange","ignorePassword","formData","onSubmitText","onSubmit","values","body","email","firstname","lastname","role","bind","deleteUserModalTitle","deleteUserModalLabel"],"sourceRoot":""}