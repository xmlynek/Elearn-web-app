{"version":3,"file":"static/js/459.b88fffc5.chunk.js","mappings":"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","sources":["pages/ResetPasswordPage.tsx"],"sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport AuthContext from '../store/auth-context';\r\nimport * as Yup from 'yup';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Button } from 'react-bootstrap';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\n\r\nconst ResetPasswordPage: React.FC = (props) => {\r\n  const authContext = useContext(AuthContext);\r\n  const {\r\n    isLoggedIn,\r\n    resetPassword,\r\n    resetStateVariables,\r\n    isLoading,\r\n    error,\r\n    success,\r\n  } = authContext;\r\n\r\n  const navigate = useNavigate();\r\n  const translations = useLangTranslation();\r\n  const params = useParams();\r\n  const token = params.token ? params.token : '';\r\n\r\n  useEffect(() => {\r\n    resetStateVariables();\r\n    if (isLoggedIn || !token) {\r\n      navigate('/', { replace: true });\r\n    }\r\n  }, [isLoggedIn, navigate, resetStateVariables, token]);\r\n\r\n  return (\r\n    <section className=\"logreg-container text-start\">\r\n      <h3 className=\"text-center\">{translations?.restorePasswordHeader}</h3>\r\n      <Formik\r\n        validationSchema={Yup.object({\r\n          newPassword: Yup.string()\r\n            .trim()\r\n            .required(translations?.isRequiredErr)\r\n            .min(8, translations?.passwordLengthErr)\r\n            .max(255, translations?.maxCharLengthErr)\r\n            .matches(/\\d/, translations?.passwordMustContainNumberErr)\r\n            .matches(/[a-zA-Z]/, translations?.passwordMustContainLetterErr),\r\n          confirmNewPassword: Yup.string()\r\n            .trim()\r\n            .required(translations?.isRequiredErr)\r\n            .oneOf(\r\n              [Yup.ref('newPassword')],\r\n              translations?.passwordMustMatchErr\r\n            ),\r\n        })}\r\n        initialValues={{ newPassword: '', confirmNewPassword: '' }}\r\n        onSubmit={(values, { resetForm }) => {\r\n          resetPassword(values, token);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form className={`form-floating mb-3`}>\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"newPassword\">\r\n                  {translations?.newPasswordLabel}\r\n                </label>\r\n                <Field\r\n                  name=\"newPassword\"\r\n                  type=\"password\"\r\n                  className={`form-control ${\r\n                    errors.newPassword && touched.newPassword\r\n                      ? 'is-invalid'\r\n                      : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"newPassword\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"confirmNewPassword\">\r\n                  {translations?.confirmNewPasswordLabel}\r\n                </label>\r\n                <Field\r\n                  name=\"confirmNewPassword\"\r\n                  type=\"password\"\r\n                  className={`form-control ${\r\n                    errors.confirmNewPassword && touched.confirmNewPassword\r\n                      ? 'is-invalid'\r\n                      : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"confirmNewPassword\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <Button type=\"submit\" className=\"width-50-991-100 \">\r\n                {translations?.restorePasswordSubmitButtonTitle}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {isLoading && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && error !== '' && (\r\n        <div className=\"centered h4 error-msg\">\r\n          <p>\r\n            {error}\r\n            <br />\r\n            <Link to={'/forgot-password'} className=\"ms-2 mt-2\">\r\n              {translations?.restorePasswordAgainDueErrorHeader}\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {!isLoading && error === '' && success && (\r\n        <div className=\"centered h4\">\r\n          <p>\r\n            {translations?.passwordSuccessfullyRestoredMesage}\r\n            <Link to={'/login'} className=\"ms-2\">\r\n              {translations?.logInLabel}\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordPage;\r\n"],"names":["props","authContext","useContext","AuthContext","isLoggedIn","resetPassword","resetStateVariables","isLoading","error","success","navigate","useNavigate","translations","useLangTranslation","params","useParams","token","useEffect","replace","className","restorePasswordHeader","validationSchema","Yup","newPassword","trim","required","isRequiredErr","min","passwordLengthErr","max","maxCharLengthErr","matches","passwordMustContainNumberErr","passwordMustContainLetterErr","confirmNewPassword","oneOf","passwordMustMatchErr","initialValues","onSubmit","values","resetForm","errors","touched","htmlFor","newPasswordLabel","name","type","msg","confirmNewPasswordLabel","restorePasswordSubmitButtonTitle","to","restorePasswordAgainDueErrorHeader","passwordSuccessfullyRestoredMesage","logInLabel"],"sourceRoot":""}