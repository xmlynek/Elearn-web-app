{"version":3,"file":"static/js/15.4ac8e07c.chunk.js","mappings":"kPAiGA,UAxFqC,SAACA,GACpC,IAAMC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,GACzBC,GAAeC,EAAAA,EAAAA,KAGnBC,EAMEL,EANFK,WACAC,EAKEN,EALFM,eACAC,EAIEP,EAJFO,UACAC,EAGER,EAHFQ,MACAC,EAEET,EAFFS,oBACAC,EACEV,EADFU,QAEIC,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,WACRJ,IACIJ,GACFM,EAAS,IAAK,CAAEG,SAAS,MAE1B,CAACT,EAAYM,EAAUF,KAGxB,qBAASM,UAAU,8BAAnB,WACE,eAAIA,UAAU,cAAd,gBAA6BZ,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAca,uBAC3C,SAAC,KAAD,CACEC,iBAAkBC,EAAAA,GAAW,CAC3BC,MAAOD,EAAAA,KACJC,MADI,OACEhB,QADF,IACEA,OADF,EACEA,EAAciB,qBACpBC,OACAC,SAHI,OAGKnB,QAHL,IAGKA,OAHL,EAGKA,EAAcoB,iBAE5BC,cAAe,CAAEL,MAAO,IACxBM,SAAU,cAA+B,IAA5BN,EAA2B,EAA3BA,MAAWO,EAAgB,EAAhBA,UACtBpB,EAAea,GACfO,KAVJ,SAaG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,CAAMb,UAAS,qBAAf,WACE,gBAAKA,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOc,QAAQ,QAAf,gBAAwB1B,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAc2B,kBACtC,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLjB,UAAS,uBACPY,EAAOR,OAASS,EAAQT,MAAQ,aAAe,OAGnD,SAAC,KAAD,CAAcY,KAAK,QAAnB,SACG,SAACE,GAAD,OAAS,gBAAKlB,UAAU,YAAf,SAA4BkB,aAI5C,gBAAKlB,UAAU,cAAf,UACE,SAAC,IAAD,CAAQiB,KAAK,SAASjB,UAAU,oBAAhC,gBACGZ,QADH,IACGA,OADH,EACGA,EAAc+B,oBAGnB,gBAAKnB,UAAU,mBAAf,UACE,wBACE,SAAC,KAAD,CAAMoB,GAAI,SAAUpB,UAAU,OAA9B,gBACGZ,QADH,IACGA,OADH,EACGA,EAAciC,iCAO1B7B,IACC,gBAAKQ,UAAU,WAAf,UACE,SAAC,IAAD,OAGFR,GAAuB,KAAVC,IACb,gBAAKO,UAAU,wBAAf,UACE,uBAAIP,OAGND,GAAuB,KAAVC,GAAgBE,IAC7B,gBAAKK,UAAU,cAAf,UACE,8BAAIZ,QAAJ,IAAIA,OAAJ,EAAIA,EAAckC","sources":["pages/ForgotPasswordPage.tsx"],"sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport AuthContext from '../store/auth-context';\r\nimport * as Yup from 'yup';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport { Button } from 'react-bootstrap';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\n\r\nconst ForgotPasswordPage: React.FC = (props) => {\r\n  const authContext = useContext(AuthContext);\r\n  const translations = useLangTranslation();\r\n\r\n  const {\r\n    isLoggedIn,\r\n    forgotPassword,\r\n    isLoading,\r\n    error,\r\n    resetStateVariables,\r\n    success,\r\n  } = authContext;\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    resetStateVariables();\r\n    if (isLoggedIn) {\r\n      navigate('/', { replace: true });\r\n    }\r\n  }, [isLoggedIn, navigate, resetStateVariables]);\r\n\r\n  return (\r\n    <section className=\"logreg-container text-start\">\r\n      <h3 className=\"text-center\">{translations?.forgotPasswordLabel}</h3>\r\n      <Formik\r\n        validationSchema={Yup.object({\r\n          email: Yup.string()\r\n            .email(translations?.wrongEmailFormatErr)\r\n            .trim()\r\n            .required(translations?.isRequiredErr),\r\n        })}\r\n        initialValues={{ email: '' }}\r\n        onSubmit={({ email }, { resetForm }) => {\r\n          forgotPassword(email);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form className={`form-floating mb-3`}>\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"email\">{translations?.yourEmailLabel}</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  className={`form-control ${\r\n                    errors.email && touched.email ? 'is-invalid' : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"email\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <Button type=\"submit\" className=\"width-50-991-100 \">\r\n                {translations?.sendEmailLabel}\r\n              </Button>\r\n            </div>\r\n            <div className=\"mt-4 text-center\">\r\n              <p>\r\n                <Link to={'/login'} className=\"ms-2\">\r\n                  {translations?.backToLoginPageLabel}\r\n                </Link>\r\n              </p>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n      {isLoading && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && error !== '' && (\r\n        <div className=\"centered h4 error-msg\">\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n      {!isLoading && error === '' && success && (\r\n        <div className=\"centered h4\">\r\n          <p>{translations?.emailWasSentWithInstructionsMessage}</p>\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordPage;\r\n"],"names":["props","authContext","useContext","AuthContext","translations","useLangTranslation","isLoggedIn","forgotPassword","isLoading","error","resetStateVariables","success","navigate","useNavigate","useEffect","replace","className","forgotPasswordLabel","validationSchema","Yup","email","wrongEmailFormatErr","trim","required","isRequiredErr","initialValues","onSubmit","resetForm","errors","touched","htmlFor","yourEmailLabel","name","type","msg","sendEmailLabel","to","backToLoginPageLabel","emailWasSentWithInstructionsMessage"],"sourceRoot":""}