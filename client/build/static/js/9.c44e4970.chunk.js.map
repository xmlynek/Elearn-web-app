{"version":3,"file":"static/js/9.c44e4970.chunk.js","mappings":"iMA4PA,IA7OkC,SAACA,GACjC,IAoBIC,EApBEC,GAAeC,EAAAA,EAAAA,KAEfC,EAAgBJ,EAAMK,SACxB,CACEC,UAAWN,EAAMK,SAASC,UAC1BC,SAAUP,EAAMK,SAASE,SACzBC,MAAOR,EAAMK,SAASG,MACtBC,SAAU,GACVC,KAAMV,EAAMK,SAASK,MAEvB,CACEF,MAAO,GACPF,UAAW,GACXC,SAAU,GACVG,KAAMC,EAAAA,GAAAA,QACNF,SAAU,GACVG,gBAAiB,GACjBC,oBAAoBb,EAAMc,cAyDhC,OAnDEb,EADED,EAAMc,aACWC,EAAAA,GAAW,CAC5BT,UAAWS,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACtDX,SAAUQ,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACrDV,MAAOO,EAAAA,KACJP,MADI,OACEN,QADF,IACEA,OADF,EACEA,EAAciB,qBACpBH,OACAC,SAHI,OAGKf,QAHL,IAGKA,OAHL,EAGKA,EAAcgB,eAC1BT,SAAUM,EAAAA,KACPC,OACAC,SAFO,OAEEf,QAFF,IAEEA,OAFF,EAEEA,EAAcgB,eACvBE,IAAI,EAHG,OAGAlB,QAHA,IAGAA,OAHA,EAGAA,EAAcmB,mBACrBC,IAAI,IAJG,OAIEpB,QAJF,IAIEA,OAJF,EAIEA,EAAcqB,kBACvBC,QAAQ,KALD,OAKOtB,QALP,IAKOA,OALP,EAKOA,EAAcuB,8BAC5BD,QAAQ,WAND,OAMatB,QANb,IAMaA,OANb,EAMaA,EAAcwB,8BACrCd,gBAAiBG,EAAAA,KACdC,OACAC,SAFc,OAELf,QAFK,IAELA,OAFK,EAELA,EAAcgB,eACvBS,MAAM,CAACZ,EAAAA,GAAQ,aAHD,OAGeb,QAHf,IAGeA,OAHf,EAGeA,EAAc0B,sBAC9Cf,mBAAoBE,EAAAA,KACjBE,SADiB,OACRf,QADQ,IACRA,OADQ,EACRA,EAAcgB,eACvBS,MAAM,EAAC,GAFU,OAEHzB,QAFG,IAEHA,OAFG,EAEHA,EAAcgB,iBAGdH,EAAAA,GAAW,CAC5BT,UAAWS,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACtDX,SAAUQ,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACrDV,MAAOO,EAAAA,KACJP,MADI,OACEN,QADF,IACEA,OADF,EACEA,EAAciB,qBACpBH,OACAC,SAHI,OAGKf,QAHL,IAGKA,OAHL,EAGKA,EAAcgB,eAC1BT,SAAUM,EAAAA,KACPC,OACAC,SAFO,OAEEf,QAFF,IAEEA,OAFF,EAEEA,EAAcgB,eACvBE,IAAI,EAHG,OAGAlB,QAHA,IAGAA,OAHA,EAGAA,EAAcmB,mBACrBC,IAAI,IAJG,OAIEpB,QAJF,IAIEA,OAJF,EAIEA,EAAcqB,kBACvBC,QAAQ,KALD,OAKOtB,QALP,IAKOA,OALP,EAKOA,EAAcuB,8BAC5BD,QAAQ,WAND,OAMatB,QANb,IAMaA,OANb,EAMaA,EAAcwB,gCAGrC1B,EAAM6B,iBAAmB7B,EAAM8B,iBACjC7B,EAAmBc,EAAAA,GAAW,CAC5BT,UAAWS,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACtDX,SAAUQ,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,eACrDV,MAAOO,EAAAA,KACJP,MADI,OACEN,QADF,IACEA,OADF,EACEA,EAAciB,qBACpBH,OACAC,SAHI,OAGKf,QAHL,IAGKA,OAHL,EAGKA,EAAcgB,eAC1BR,KAAMK,EAAAA,KAAaC,OAAOC,SAApB,OAA6Bf,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcgB,mBAKnD,+BACE,SAAC,KAAD,CACEa,SAAU,SAACC,GACThC,EAAM+B,SAASC,IAEjB5B,cAAeA,EACfH,iBAAkBA,EALpB,SAOG,gBAAGgC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,CAAMC,UAAS,qBAAf,WACE,gBAAKA,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,YAAf,gBACGlC,QADH,IACGA,OADH,EACGA,EAAcmC,kBAEjB,SAAC,KAAD,CACEC,GAAG,YACHC,KAAK,YACLJ,UAAS,uBACPF,EAAO3B,WAAa4B,EAAQ5B,UAAY,aAAe,OAG3D,SAAC,KAAD,CAAciC,KAAK,YAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,aAK5C,gBAAKL,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,WAAf,gBAA2BlC,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAcuC,iBACzC,SAAC,KAAD,CACEH,GAAG,WACHC,KAAK,WACLJ,UAAS,uBACPF,EAAO1B,UAAY2B,EAAQ3B,SAAW,aAAe,OAGzD,SAAC,KAAD,CAAcgC,KAAK,WAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,aAK5C,gBAAKL,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,QAAf,oBACA,SAAC,KAAD,CACEE,GAAG,QACHC,KAAK,QACLJ,UAAS,uBACPF,EAAOzB,OAAS0B,EAAQ1B,MAAQ,aAAe,OAGnD,SAAC,KAAD,CAAc+B,KAAK,QAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,aAK1CxC,EAAM8B,iBACN,gBAAKK,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,WAAf,gBACGlC,QADH,IACGA,OADH,EACGA,EAAcwC,iBAEjB,SAAC,KAAD,CACEJ,GAAG,WACHC,KAAK,WACLI,KAAK,WACLR,UAAS,uBACPF,EAAOxB,UAAYyB,EAAQzB,SAAW,aAAe,OAGzD,SAAC,KAAD,CAAc8B,KAAK,WAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,YAM7CxC,EAAMc,eACL,iCACE,gBAAKqB,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,kBAAf,gBACGlC,QADH,IACGA,OADH,EACGA,EAAc0C,wBAEjB,SAAC,KAAD,CACEN,GAAG,kBACHC,KAAK,kBACLI,KAAK,WACLR,UAAS,uBACPF,EAAOxB,UAAYyB,EAAQzB,SAAW,aAAe,OAGzD,SAAC,KAAD,CAAc8B,KAAK,kBAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,aAI5C,gBAAKL,UAAU,YAAf,UACE,gBAAKA,UAAU,eAAf,UACE,iBAAKA,UAAU,aAAf,WACE,SAAC,KAAD,CACEG,GAAG,qBACHC,KAAK,qBACLI,KAAK,WACLR,UAAS,sBAEX,kBACEC,QAAQ,qBACRD,UAAU,mBAFZ,gBAIGjC,QAJH,IAIGA,OAJH,EAIGA,EAAc2C,gCAEjB,SAAC,KAAD,CAAcN,KAAK,qBAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,iBAQjDxC,EAAM6B,kBACL,gBAAKM,UAAU,YAAf,UACE,iBAAKA,UAAU,eAAf,WACE,kBAAOC,QAAQ,kBAAf,gBACGlC,QADH,IACGA,OADH,EACGA,EAAc4C,iBAEjB,UAAC,KAAD,CACEP,KAAK,OACLQ,GAAG,SACHZ,UAAS,uBACPF,EAAOvB,MAAQwB,EAAQxB,KAAO,aAAe,IAJjD,WAOE,mBAAQsC,MAAOrC,EAAAA,GAAAA,QAAf,SAAkCA,EAAAA,GAAAA,WAClC,mBAAQqC,MAAOrC,EAAAA,GAAAA,QAAf,SAAkCA,EAAAA,GAAAA,WAClC,mBAAQqC,MAAOrC,EAAAA,GAAAA,MAAf,SAAgCA,EAAAA,GAAAA,YAElC,SAAC,KAAD,CAAc4B,KAAK,OAAnB,SACG,SAACC,GAAD,OAAS,gBAAKL,UAAU,YAAf,SAA4BK,aAM9C,gBAAKL,UAAU,cAAf,UACE,SAAC,IAAD,CAAQQ,KAAK,SAASR,UAAU,mBAAhC,SACGnC,EAAMiD,2B,+GCvLvB,UAnDmC,SAACjD,GAClC,IAAMkD,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,GACzBlD,GAAeC,EAAAA,EAAAA,KACbkD,EAA0CH,EAA1CG,WAAYC,EAA8BJ,EAA9BI,KAAMC,EAAwBL,EAAxBK,oBACpBC,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,WACRH,IACIF,GAAcC,GAChBE,EAAS,OAEV,CAACH,EAAYC,EAAME,EAAUD,KAG9B,qBAASpB,UAAU,mBAAnB,WACE,eAAIA,UAAU,cAAd,gBAA6BjC,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAcyD,4BAC3C,SAAC,IAAD,CACE7C,cAAc,EACdmC,aAAY,OAAE/C,QAAF,IAAEA,OAAF,EAAEA,EAAc0D,8BAC5B7B,SAAU,SAAC8B,GACTX,EAAYY,SAAS,CACnBxD,UAAWuD,EAAIvD,UACfC,SAAUsD,EAAItD,SACdK,gBAAiBiD,EAAIjD,gBACrBH,SAAUoD,EAAIpD,SACdD,MAAOqD,EAAIrD,YAIjB,gBAAK2B,UAAU,mBAAf,UACE,gCACGjC,QADH,IACGA,OADH,EACGA,EAAc6D,2BACf,SAAC,KAAD,CAAMC,GAAI,SAAU7B,UAAU,OAA9B,gBACGjC,QADH,IACGA,OADH,EACGA,EAAc+D,kBAIE,KAAtBf,EAAYgB,QACX,gBAAK/B,UAAU,wBAAf,UACE,uBAAIe,EAAYgB,UAGnBhB,EAAYiB,WAAmC,KAAtBjB,EAAYgB,QACpC,gBAAK/B,UAAU,WAAf,UACE,SAAC,IAAD","sources":["components/users/UserForm.tsx","pages/RegistrationPage.tsx"],"sourcesContent":["import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport User, { UserRole } from '../../models/User';\r\nimport * as Yup from 'yup';\r\nimport { Button } from 'react-bootstrap';\r\nimport useLangTranslation from '../../hooks/useLangTranslation';\r\n\r\ntype Props = {\r\n  formData?: User;\r\n  onSubmit: Function;\r\n  onSubmitText?: string | React.ReactNode;\r\n  registration?: boolean;\r\n  ignorePassword?: boolean;\r\n  allowRoleChange?: boolean;\r\n};\r\n\r\nconst UserForm: React.FC<Props> = (props) => {\r\n  const translations = useLangTranslation();\r\n\r\n  const initialValues = props.formData\r\n    ? {\r\n        firstname: props.formData.firstname,\r\n        lastname: props.formData.lastname,\r\n        email: props.formData.email,\r\n        password: '',\r\n        role: props.formData.role,\r\n      }\r\n    : {\r\n        email: '',\r\n        firstname: '',\r\n        lastname: '',\r\n        role: UserRole.STUDENT,\r\n        password: '',\r\n        confirmPassword: '',\r\n        confirmProcessData: props.registration ? false : true,\r\n      };\r\n\r\n  let validationSchema;\r\n\r\n  if (props.registration) {\r\n    validationSchema = Yup.object({\r\n      firstname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      lastname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      email: Yup.string()\r\n        .email(translations?.wrongEmailFormatErr)\r\n        .trim()\r\n        .required(translations?.isRequiredErr),\r\n      password: Yup.string()\r\n        .trim()\r\n        .required(translations?.isRequiredErr)\r\n        .min(8, translations?.passwordLengthErr)\r\n        .max(255, translations?.maxCharLengthErr)\r\n        .matches(/\\d/, translations?.passwordMustContainNumberErr)\r\n        .matches(/[a-zA-Z]/, translations?.passwordMustContainLetterErr),\r\n      confirmPassword: Yup.string()\r\n        .trim()\r\n        .required(translations?.isRequiredErr)\r\n        .oneOf([Yup.ref('password')], translations?.passwordMustMatchErr),\r\n      confirmProcessData: Yup.boolean()\r\n        .required(translations?.isRequiredErr)\r\n        .oneOf([true], translations?.isRequiredErr),\r\n    });\r\n  } else {\r\n    validationSchema = Yup.object({\r\n      firstname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      lastname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      email: Yup.string()\r\n        .email(translations?.wrongEmailFormatErr)\r\n        .trim()\r\n        .required(translations?.isRequiredErr),\r\n      password: Yup.string()\r\n        .trim()\r\n        .required(translations?.isRequiredErr)\r\n        .min(8, translations?.passwordLengthErr)\r\n        .max(255, translations?.maxCharLengthErr)\r\n        .matches(/\\d/, translations?.passwordMustContainNumberErr)\r\n        .matches(/[a-zA-Z]/, translations?.passwordMustContainLetterErr),\r\n    });\r\n  }\r\n  if (props.allowRoleChange && props.ignorePassword) {\r\n    validationSchema = Yup.object({\r\n      firstname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      lastname: Yup.string().trim().required(translations?.isRequiredErr),\r\n      email: Yup.string()\r\n        .email(translations?.wrongEmailFormatErr)\r\n        .trim()\r\n        .required(translations?.isRequiredErr),\r\n      role: Yup.string().trim().required(translations?.isRequiredErr),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        onSubmit={(values) => {\r\n          props.onSubmit(values);\r\n        }}\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form className={`form-floating mb-3`}>\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"firstname\">\r\n                  {translations?.firstNameLabel}\r\n                </label>\r\n                <Field\r\n                  id=\"firstname\"\r\n                  name=\"firstname\"\r\n                  className={`form-control ${\r\n                    errors.firstname && touched.firstname ? 'is-invalid' : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"firstname\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"lastname\">{translations?.lastNameLabel}</label>\r\n                <Field\r\n                  id=\"lastname\"\r\n                  name=\"lastname\"\r\n                  className={`form-control ${\r\n                    errors.lastname && touched.lastname ? 'is-invalid' : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"lastname\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3 mb-4\">\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Field\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  className={`form-control ${\r\n                    errors.email && touched.email ? 'is-invalid' : ''\r\n                  }`}\r\n                />\r\n                <ErrorMessage name=\"email\">\r\n                  {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                </ErrorMessage>\r\n              </div>\r\n            </div>\r\n\r\n            {!props.ignorePassword && (\r\n              <div className=\"mt-3 mb-4\">\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"password\">\r\n                    {translations?.passwordLabel}\r\n                  </label>\r\n                  <Field\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    type=\"password\"\r\n                    className={`form-control ${\r\n                      errors.password && touched.password ? 'is-invalid' : ''\r\n                    }`}\r\n                  />\r\n                  <ErrorMessage name=\"password\">\r\n                    {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                  </ErrorMessage>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {props.registration && (\r\n              <>\r\n                <div className=\"mt-3 mb-4\">\r\n                  <div className=\"form-control\">\r\n                    <label htmlFor=\"confirmPassword\">\r\n                      {translations?.confirmPasswordLabel}\r\n                    </label>\r\n                    <Field\r\n                      id=\"confirmPassword\"\r\n                      name=\"confirmPassword\"\r\n                      type=\"password\"\r\n                      className={`form-control ${\r\n                        errors.password && touched.password ? 'is-invalid' : ''\r\n                      }`}\r\n                    />\r\n                    <ErrorMessage name=\"confirmPassword\">\r\n                      {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                    </ErrorMessage>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3 mb-4\">\r\n                  <div className=\"form-control\">\r\n                    <div className=\"form-check\">\r\n                      <Field\r\n                        id=\"confirmProcessData\"\r\n                        name=\"confirmProcessData\"\r\n                        type=\"checkbox\"\r\n                        className={`form-check-input`}\r\n                      />\r\n                      <label\r\n                        htmlFor=\"confirmProcessData\"\r\n                        className=\"form-check-label\"\r\n                      >\r\n                        {translations?.consentToDataProcessingLabel}\r\n                      </label>\r\n                      <ErrorMessage name=\"confirmProcessData\">\r\n                        {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                      </ErrorMessage>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n\r\n            {props.allowRoleChange && (\r\n              <div className=\"mt-3 mb-4\">\r\n                <div className=\"form-control\">\r\n                  <label htmlFor=\"confirmPassword\">\r\n                    {translations?.userRoleLabel}\r\n                  </label>\r\n                  <Field\r\n                    name=\"role\"\r\n                    as=\"select\"\r\n                    className={`form-control ${\r\n                      errors.role && touched.role ? 'is-invalid' : ''\r\n                    }`}\r\n                  >\r\n                    <option value={UserRole.STUDENT}>{UserRole.STUDENT}</option>\r\n                    <option value={UserRole.TEACHER}>{UserRole.TEACHER}</option>\r\n                    <option value={UserRole.ADMIN}>{UserRole.ADMIN}</option>\r\n                  </Field>\r\n                  <ErrorMessage name=\"role\">\r\n                    {(msg) => <div className=\"error-msg\">{msg}</div>}\r\n                  </ErrorMessage>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"text-center\">\r\n              <Button type=\"submit\" className=\"width-responsive\">\r\n                {props.onSubmitText}\r\n              </Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import { useContext, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport UserForm from '../components/users/UserForm';\r\nimport useLangTranslation from '../hooks/useLangTranslation';\r\nimport AuthContext from '../store/auth-context';\r\n\r\nconst RegistrationPage: React.FC = (props) => {\r\n  const authContext = useContext(AuthContext);\r\n  const translations = useLangTranslation();\r\n  const { isLoggedIn, user, resetStateVariables } = authContext;\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    resetStateVariables();\r\n    if (isLoggedIn && user) {\r\n      navigate('/');\r\n    }\r\n  }, [isLoggedIn, user, navigate, resetStateVariables]);\r\n\r\n  return (\r\n    <section className=\"logreg-container\">\r\n      <h3 className=\"text-center\">{translations?.registrationNavbarHeader}</h3>\r\n      <UserForm\r\n        registration={true}\r\n        onSubmitText={translations?.registrationSubmitButtonTitle}\r\n        onSubmit={(val: any) => {\r\n          authContext.register({\r\n            firstname: val.firstname,\r\n            lastname: val.lastname,\r\n            confirmPassword: val.confirmPassword,\r\n            password: val.password,\r\n            email: val.email,\r\n          });\r\n        }}\r\n      />\r\n      <div className=\"mt-4 text-center\">\r\n        <p>\r\n          {translations?.alreadyRegisteredQuestion}\r\n          <Link to={'/login'} className=\"ms-2\">\r\n            {translations?.logInLabel}\r\n          </Link>\r\n        </p>\r\n      </div>\r\n      {authContext.error !== '' && (\r\n        <div className=\"centered h4 error-msg\">\r\n          <p>{authContext.error}</p>\r\n        </div>\r\n      )}\r\n      {authContext.isLoading && authContext.error === '' && (\r\n        <div className=\"centered\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default RegistrationPage;\r\n"],"names":["props","validationSchema","translations","useLangTranslation","initialValues","formData","firstname","lastname","email","password","role","UserRole","confirmPassword","confirmProcessData","registration","Yup","trim","required","isRequiredErr","wrongEmailFormatErr","min","passwordLengthErr","max","maxCharLengthErr","matches","passwordMustContainNumberErr","passwordMustContainLetterErr","oneOf","passwordMustMatchErr","allowRoleChange","ignorePassword","onSubmit","values","errors","touched","className","htmlFor","firstNameLabel","id","name","msg","lastNameLabel","passwordLabel","type","confirmPasswordLabel","consentToDataProcessingLabel","userRoleLabel","as","value","onSubmitText","authContext","useContext","AuthContext","isLoggedIn","user","resetStateVariables","navigate","useNavigate","useEffect","registrationNavbarHeader","registrationSubmitButtonTitle","val","register","alreadyRegisteredQuestion","to","logInLabel","error","isLoading"],"sourceRoot":""}