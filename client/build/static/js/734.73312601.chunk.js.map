{"version":3,"file":"static/js/734.73312601.chunk.js","mappings":"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","sources":["components/Layout/ContainerWrapper.tsx","components/UI/ConfirmDialogButton.tsx","components/UI/ConfirmModalDialog.tsx","components/tests/TestQuestionOption.tsx","components/tests/TestQuestion.tsx","pages/TestPage.tsx"],"sourcesContent":["import { Container } from \"react-bootstrap\";\r\n\r\nconst ContainerWrapper: React.FC = (props) => {\r\n  return (\r\n    <Container className=\"container-content my-sm-4 my-xl-5 pb-3 pb-sm-4 pb-lg-5\">\r\n      {props.children}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContainerWrapper;\r\n","import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport ConfirmModalDialog from \"./ConfirmModalDialog\";\r\n\r\ntype Props = {\r\n  headerTitle: string;\r\n  title: string;\r\n  confirmBtnTitle: string;\r\n  confirmBtnVariant?: string;\r\n  className?: string;\r\n  icon?: React.ReactNode;\r\n  onConfirm: () => void;\r\n};\r\n\r\nconst ConfirmDialogButton: React.FC<Props> = (props) => {\r\n  const [isShowedDialog, setIsShowedDialog] = useState<boolean>(false);\r\n\r\n  const hideDialogHandler = () => {\r\n    setIsShowedDialog(false);\r\n  };\r\n\r\n  const showDialogHandler = () => {\r\n    setIsShowedDialog(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ConfirmModalDialog\r\n        show={isShowedDialog}\r\n        headerTitle={props.headerTitle}\r\n        onHide={hideDialogHandler}\r\n        title={props.title}\r\n        onConfirm={props.onConfirm}\r\n      />\r\n      <Button\r\n        variant={props.confirmBtnVariant ? props.confirmBtnVariant : \"danger\"}\r\n        onClick={showDialogHandler}\r\n        className={props.className}\r\n      >\r\n        {props.confirmBtnTitle}\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialogButton;\r\n","import { Modal, Button } from \"react-bootstrap\";\r\n\r\ntype Props = {\r\n  className?: string;\r\n  title: string;\r\n  headerTitle: string;\r\n  show: boolean;\r\n  onHide: () => void;\r\n  onConfirm: () => void;\r\n};\r\n\r\nconst ConfirmModalDialog: React.FC<Props> = (props) => {\r\n  return (\r\n    <Modal\r\n      className={props.className}\r\n      show={props.show}\r\n      onHide={props.onHide}\r\n      backdrop={true}\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>\r\n          {props.title}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h5>{props.headerTitle}</h5>\r\n        {props.children}\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onConfirm}>Potvrdiť</Button>\r\n        <Button onClick={props.onHide}>Zrušiť</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ConfirmModalDialog;\r\n","import { Field } from \"formik\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport QuestionOptionClass from \"../../models/QuestionOptionClass\";\r\n\r\ntype Props = {\r\n  questionType: \"checkbox\" | \"radio\";\r\n  option: QuestionOptionClass;\r\n  name: string;\r\n  index: string;\r\n};\r\n\r\nconst TestQuestionOption: React.FC<Props> = (props) => {\r\n  return (\r\n    <Form.Check>\r\n      <span className=\"ms-1 ms-sm-3\">{props.index}</span>\r\n      <Field\r\n        type={props.questionType}\r\n        id={`${props.name}${props.option.id}`}\r\n        value={props.option.title}\r\n        name={props.name}\r\n        className={\"ms-1 ms-sm-2 ms-md-3 form-check-input\"}\r\n      />\r\n      <Form.Label\r\n        className={\"d-inline-block ms-2 ms-md-3 form-check-label\"}\r\n        htmlFor={`${props.name}${props.option.id}`}\r\n      >\r\n        {props.option.title}\r\n      </Form.Label>\r\n    </Form.Check>\r\n  );\r\n};\r\n\r\nexport default TestQuestionOption;\r\n","import { Field, FormikValues } from \"formik\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport TestQuestionClass, {\r\n  TestQuestionType,\r\n} from \"../../models/TestQuestionClass\";\r\nimport TestQuestionOption from \"./TestQuestionOption\";\r\n\r\ntype Props = {\r\n  question: TestQuestionClass;\r\n  index: number;\r\n  values?: FormikValues;\r\n  onChange?: Function;\r\n};\r\n\r\nconst TestQuestion: React.FC<Props> = (props) => {\r\n  let output = null;\r\n\r\n  let optionType: \"checkbox\" | \"radio\" = \"radio\";\r\n  if (props.question.type === TestQuestionType.INPUT) {\r\n    output = (\r\n      <Field\r\n        className=\"mt-2 form-control\"\r\n        type=\"text\"\r\n        onChange={props.onChange}\r\n        value={props.values && props.values[`${props.question.id}.text`]}\r\n        name={`${props.question.id}`}\r\n        id={`${props.question.title}${props.question.id}`}\r\n        placeholder={\"Vaša odpoveď\"}\r\n      />\r\n    );\r\n  } else if (props.question.type === TestQuestionType.MULTIPLE_CHOICES) {\r\n    optionType = \"checkbox\";\r\n  } else if (props.question.type === TestQuestionType.SINGLE_CHOICE) {\r\n    optionType = \"radio\";\r\n  }\r\n\r\n  output =\r\n    output === null\r\n      ? props.question.options.map((option, index) => (\r\n          <TestQuestionOption\r\n            name={`${props.question.id}`}\r\n            option={option}\r\n            questionType={optionType}\r\n            key={option.id}\r\n            index={String.fromCharCode(\"A\".charCodeAt(0) + index)}\r\n          />\r\n        ))\r\n      : output;\r\n\r\n  return (\r\n    <Form.Group className=\"mt-4 mb-3\">\r\n      <h2 className=\"h4\">\r\n        {props.index}. {props.question.title} ({props.question.points}b)\r\n      </h2>\r\n      <div>{output}</div>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default TestQuestion;\r\n","import { Formik, Form, FormikValues } from \"formik\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TestQuestion from \"../components/tests/TestQuestion\";\r\nimport ContainerWrapper from \"../components/Layout/ContainerWrapper\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport {\r\n  QuestionEvaluateRequest,\r\n  TestQuestionType,\r\n} from \"../models/TestQuestionClass\";\r\nimport TestContext from \"../store/test-context\";\r\nimport ConfirmDialogButton from \"../components/UI/ConfirmDialogButton\";\r\n\r\nconst TestPage: React.FC = () => {\r\n  const params = useParams();\r\n\r\n  const testId = params.testId;\r\n  const startTime = new Date();\r\n\r\n  const testCtx = useContext(TestContext);\r\n  const { fetchById, data, evaluateTest } = testCtx;\r\n  const { opStatus: status, tests, error } = data;\r\n  const test = tests[0];\r\n\r\n  useEffect(() => {\r\n    if (testId && parseInt(testId) > 0) {\r\n      fetchById(parseInt(testId));\r\n    }\r\n  }, [fetchById, testId]);\r\n\r\n  if (status === \"Pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (\r\n    error ||\r\n    status === \"Failure\" ||\r\n    (status === \"Finished\" && (!tests || tests.length === 0))\r\n  ) {\r\n    return (\r\n      <p className=\"centerVertical h1 bg-info py-2 px-3\">\r\n        {error === \"Request failed with status code 404\"\r\n          ? `Test s ID ${testId} nebol nájdený`\r\n          : error}\r\n      </p>\r\n    );\r\n  }\r\n\r\n  let options: any = {};\r\n\r\n  test.questions.forEach((question) => {\r\n    if (question.type === TestQuestionType.INPUT) {\r\n      options[`${question.id}`] = \"\";\r\n    } else if (question.type === TestQuestionType.SINGLE_CHOICE) {\r\n      options[`${question.id}`] = \"\";\r\n    } else if (question.type === TestQuestionType.MULTIPLE_CHOICES) {\r\n      options[`${question.id}`] = \"\";\r\n    }\r\n  });\r\n\r\n  const submitHandler = async (values: FormikValues) => {\r\n    evaluateTest(\r\n      {\r\n        started_at: startTime,\r\n        answers: test.questions.map((question): QuestionEvaluateRequest => {\r\n          let usersAnswer = values[question.id];\r\n          return {\r\n            questionId: question.id,\r\n            type: question.type,\r\n            answer:\r\n              question.type === TestQuestionType.MULTIPLE_CHOICES\r\n                ? (usersAnswer ? usersAnswer : [\"\"])\r\n                : usersAnswer ? [usersAnswer] : [\"\"],\r\n          };\r\n        }),\r\n      },\r\n      test.id\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContainerWrapper>\r\n      <Row>\r\n        <Col>\r\n          <header className=\"text-center\">\r\n            <h1 className=\"display-2 txt-main\">Test: {test.title}</h1>\r\n          </header>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"px-1 px-md-3 px-lg-4 px-xl-5\">\r\n        <Formik\r\n          initialValues={{ testId: test.id, options }}\r\n          onSubmit={(values) => {\r\n            // console.log(values);\r\n            submitHandler(values);\r\n          }}\r\n        >\r\n          {({ values, handleChange, handleSubmit }) => (\r\n            <Form>\r\n              {test.questions.map((question, index) => (\r\n                <TestQuestion\r\n                  key={question.id}\r\n                  question={question}\r\n                  index={index + 1}\r\n                  values={values}\r\n                  onChange={handleChange}\r\n                />\r\n              ))}\r\n              <div className=\"centered\">\r\n                <ConfirmDialogButton\r\n                  confirmBtnTitle=\"Odoslať\"\r\n                  headerTitle=\"Naozaj chcete odoslať a vyhodnotiť tento test?\"\r\n                  title=\"Odoslanie testu\"\r\n                  onConfirm={handleSubmit}\r\n                  confirmBtnVariant=\"primary\"\r\n                  className=\"width-50-991-100\"\r\n                >\r\n                  Odoslat\r\n                </ConfirmDialogButton>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Row>\r\n    </ContainerWrapper>\r\n  );\r\n};\r\n\r\nexport default TestPage;\r\n"],"names":["props","className","children","useState","isShowedDialog","setIsShowedDialog","show","headerTitle","onHide","title","onConfirm","variant","confirmBtnVariant","onClick","confirmBtnTitle","backdrop","closeButton","Form","index","type","questionType","id","name","option","value","htmlFor","output","optionType","question","TestQuestionType","onChange","values","placeholder","options","map","String","fromCharCode","charCodeAt","points","testId","useParams","startTime","Date","testCtx","useContext","TestContext","fetchById","data","evaluateTest","status","opStatus","tests","error","test","useEffect","parseInt","LoadingSpinner","length","questions","forEach","submitHandler","started_at","answers","usersAnswer","questionId","answer","ContainerWrapper","Row","Col","initialValues","onSubmit","handleChange","handleSubmit","ConfirmDialogButton"],"sourceRoot":""}