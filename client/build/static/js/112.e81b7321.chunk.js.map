{"version":3,"file":"static/js/112.e81b7321.chunk.js","mappings":"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","sources":["components/tests/TestForm.tsx","components/UI/CustomField.tsx","components/tests/TestList.tsx","pages/TestListPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport * as Yup from \"yup\";\r\nimport { Formik, Form, FieldArray, getIn } from \"formik\";\r\n\r\nimport TestQuestionClass, {\r\n  TestQuestionType,\r\n} from \"../../models/TestQuestionClass\";\r\nimport QuestionOptionClass from \"../../models/QuestionOptionClass\";\r\nimport TestClass from \"../../models/TestClass\";\r\nimport CustomField from \"../UI/CustomField\";\r\n\r\ntype Props = {\r\n  formField?: TestClass;\r\n  onSubmit: Function;\r\n  submitBtnText: string;\r\n  submitBtnVariant?: string;\r\n};\r\n\r\nenum FieldObjType {\r\n  QUESTION_TITLE,\r\n  QUESTION_POINTS,\r\n  QUESTION_TYPE,\r\n  OPTION_TITLE,\r\n  OPTION_CORRECT,\r\n  TEST_TITLE,\r\n}\r\n\r\nconst TestForm: React.FC<Props> = (props) => {\r\n  const [formData, setFormData] = useState<TestClass>(\r\n    props.formField\r\n      ? props.formField\r\n      : new TestClass(1, \"\", -1, [\r\n          new TestQuestionClass(\r\n            Math.random(),\r\n            1,\r\n            1,\r\n            \"\",\r\n            TestQuestionType.INPUT,\r\n            [\r\n              new QuestionOptionClass(Math.random(), \"\", true),\r\n              new QuestionOptionClass(Math.random(), \"\", true),\r\n            ]\r\n          ),\r\n        ])\r\n  );\r\n\r\n  const addQuestionHandler = () => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      newState.questions.push(\r\n        new TestQuestionClass(\r\n          Math.random(),\r\n          newState.questions.length + 1,\r\n          1,\r\n          \"\",\r\n          TestQuestionType.INPUT,\r\n          [new QuestionOptionClass(Math.random(), \"\", true)]\r\n        )\r\n      );\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const deleteQuestionHandler = (questionId: number, setValues: Function) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      newState.questions = newState.questions.filter(\r\n        (question) => question.id !== questionId\r\n      );\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n  };\r\n\r\n  const addOptionHandler = (questionId: number) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      const questionIndex = newState.questions.findIndex(\r\n        (q) => q.id === questionId\r\n      );\r\n      newState.questions[questionIndex].options.push(\r\n        new QuestionOptionClass(\r\n          Math.random(),\r\n          \"\",\r\n          newState.questions[questionIndex].type === TestQuestionType.INPUT\r\n            ? true\r\n            : false\r\n        )\r\n      );\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const deleteOptionHandler = (\r\n    questionId: number,\r\n    optionId: number,\r\n    setValues: Function\r\n  ) => {\r\n    setFormData((state) => {\r\n      const newState = state;\r\n      const questionIndex = newState.questions.findIndex(\r\n        (q) => q.id === questionId\r\n      );\r\n      newState.questions[questionIndex].options = newState.questions[\r\n        questionIndex\r\n      ].options.filter((option) => option.id !== optionId);\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n  };\r\n\r\n  const onChangeHandler = (\r\n    event: React.FormEvent<any>,\r\n    field: FieldObjType,\r\n    fieldName: string,\r\n    setValues: Function,\r\n    handleChange: Function,\r\n    questionId?: number,\r\n    optionId?: number\r\n  ) => {\r\n    setFormData((state) => {\r\n      const value = event.currentTarget.value;\r\n      const newState = state;\r\n      if (field === FieldObjType.TEST_TITLE) newState.title = value;\r\n\r\n      if (questionId) {\r\n        const question = newState.questions.at(\r\n          newState.questions.findIndex((question) => question.id === questionId)\r\n        );\r\n        if (!question) return state;\r\n\r\n        if (optionId) {\r\n          const option = question.options.at(\r\n            question.options.findIndex((option) => option.id === optionId)\r\n          );\r\n          if (!option) return state;\r\n\r\n          if (field === FieldObjType.OPTION_TITLE) option.title = value;\r\n          if (field === FieldObjType.OPTION_CORRECT) {\r\n            if (question.type === TestQuestionType.SINGLE_CHOICE) {\r\n              question.options.forEach(\r\n                (opt) => (opt.isCorrect = opt.id === option.id ? true : false)\r\n              );\r\n            }\r\n            option.isCorrect = event.currentTarget.checked;\r\n          }\r\n        }\r\n\r\n        if (field === FieldObjType.QUESTION_TITLE) question.title = value;\r\n        if (field === FieldObjType.QUESTION_POINTS) question.points = value;\r\n\r\n        if (field === FieldObjType.QUESTION_TYPE) {\r\n          question.type = value;\r\n          // (re)set option correctness\r\n          question.options.forEach(\r\n            (option) =>\r\n              (option.isCorrect =\r\n                question.type === TestQuestionType.INPUT ? true : false)\r\n          );\r\n        }\r\n      }\r\n      return newState;\r\n    });\r\n    setValues(formData);\r\n    handleChange(fieldName);\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required(\"*Povinné\"),\r\n    questions: Yup.array()\r\n      .of(\r\n        Yup.object().shape({\r\n          points: Yup.number().min(1, \"Minimálny počet bodov je 1\"),\r\n          title: Yup.string().required(\"*Povinné\"),\r\n          type: Yup.string().required(\"*Povinné\"),\r\n          options: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                title: Yup.string().required(\"*Povinné\"),\r\n                correct: Yup.boolean(),\r\n              })\r\n            )\r\n            .min(1, \"Otázka musí obsahovať aspoň jednu odpoveď\")\r\n            .required(\"*Povinné\")\r\n            .max(6, \"Maximálny počet odpovedí je 6\"),\r\n        })\r\n      )\r\n      .min(1, \"Test musí obsahovať aspoň jednu otázku\")\r\n      .required(\"*Povinné\"),\r\n  });\r\n\r\n  const validateHandler = (values: TestClass) => {\r\n    let errors: any = {};\r\n    try {\r\n      validationSchema.validateSync(values, { abortEarly: false });\r\n    } catch (error: any) {\r\n      errors = error.inner.reduce((errors: any, error: any) => {\r\n        return {\r\n          ...errors,\r\n          [error.path]: error.message,\r\n        };\r\n      });\r\n    } finally {\r\n      return values.questions.some((q) =>\r\n        q.options.every((o) => o.isCorrect === false)\r\n      )\r\n        ? {\r\n            ...errors,\r\n            optNotSelected: \"Aspoň jedna odpoveď musí byť označená ako správna\",\r\n          }\r\n        : errors;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={formData}\r\n      enableReinitialize\r\n      validateOnBlur\r\n      validate={validateHandler}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values) => {\r\n        // console.log(JSON.stringify(values, null, 2));\r\n        props.onSubmit(formData);\r\n      }}\r\n    >\r\n      {({ errors, values, touched, setValues, handleChange, setErrors }) => (\r\n        <Form className=\"form\">\r\n          <div className=\"list-group-item mt-3 \">\r\n            <CustomField\r\n              label=\"Názov testu\"\r\n              name={\"title\"}\r\n              error={errors.title && touched.title ? true : false}\r\n              placeholder={\"Veľký test...\"}\r\n              onChange={(e: any) => {\r\n                onChangeHandler(\r\n                  e,\r\n                  FieldObjType.TEST_TITLE,\r\n                  \"title\",\r\n                  setValues,\r\n                  handleChange\r\n                );\r\n              }}\r\n            />\r\n\r\n            {/* zero questions error message */}\r\n            {typeof errors.questions === \"string\" ? (\r\n              <div className=\"centered error-msg\">\r\n                <h4>{errors.questions}</h4>\r\n              </div>\r\n            ) : null}\r\n\r\n            <FieldArray name=\"questions\">\r\n              {(arrayHelpers) =>\r\n                values.questions.map((question, questionIndex) => {\r\n                  const getError = (fieldName: string) => {\r\n                    return (\r\n                      getIn(errors, fieldName) && getIn(touched, fieldName)\r\n                    );\r\n                  };\r\n\r\n                  return (\r\n                    <div key={questionIndex}>\r\n                      <hr />\r\n                      <div className=\"list-group-item mt-3 \">\r\n                        <CustomField\r\n                          key={`Otázka ${questionIndex + 1}`}\r\n                          label={`Otázka ${questionIndex + 1}`}\r\n                          name={`questions.${questionIndex}.title`}\r\n                          withCloseButton={{\r\n                            onDelete: deleteQuestionHandler.bind(\r\n                              null,\r\n                              question.id,\r\n                              setValues\r\n                            ),\r\n                          }}\r\n                          as={\"textarea\"}\r\n                          error={getError(`questions.${questionIndex}.title`)}\r\n                          placeholder={\"Aký je názov...\"}\r\n                          onChange={(e: any) =>\r\n                            onChangeHandler(\r\n                              e,\r\n                              FieldObjType.QUESTION_TITLE,\r\n                              `questions.${questionIndex}.title`,\r\n                              setValues,\r\n                              handleChange,\r\n                              question.id\r\n                            )\r\n                          }\r\n                        />\r\n\r\n                        <div className=\"row mt-3\">\r\n                          <div className=\"col-12 col-md-6\">\r\n                            <div className=\"form-control\">\r\n                              <CustomField\r\n                                label={\"Počet bodov\"}\r\n                                name={`questions.${questionIndex}.points`}\r\n                                error={getError(\r\n                                  `questions.${questionIndex}.points`\r\n                                )}\r\n                                className={\"mb-2\"}\r\n                                type={\"number\"}\r\n                                placeholder={\"1\"}\r\n                                onChange={(e: any) =>\r\n                                  onChangeHandler(\r\n                                    e,\r\n                                    FieldObjType.QUESTION_POINTS,\r\n                                    `questions.${questionIndex}.points`,\r\n                                    setValues,\r\n                                    handleChange,\r\n                                    question.id\r\n                                  )\r\n                                }\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col mt-sm-3 mt-md-0\">\r\n                            <div className=\"form-control\">\r\n                              <CustomField\r\n                                name={`questions.${questionIndex}.type`}\r\n                                label={\"Typ otázky\"}\r\n                                as=\"select\"\r\n                                className={\"mb-2\"}\r\n                                error={getError(\r\n                                  `questions.${questionIndex}.type`\r\n                                )}\r\n                                onChange={(e: any) =>\r\n                                  onChangeHandler(\r\n                                    e,\r\n                                    FieldObjType.QUESTION_TYPE,\r\n                                    `questions.${questionIndex}.type`,\r\n                                    setValues,\r\n                                    handleChange,\r\n                                    question.id\r\n                                  )\r\n                                }\r\n                              >\r\n                                <option value={TestQuestionType.INPUT}>\r\n                                  Textový vstup\r\n                                </option>\r\n                                <option value={TestQuestionType.SINGLE_CHOICE}>\r\n                                  Jedna možnosť\r\n                                </option>\r\n                                <option\r\n                                  value={TestQuestionType.MULTIPLE_CHOICES}\r\n                                >\r\n                                  Viacero možností\r\n                                </option>\r\n                              </CustomField>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        {/* zero options error message */}\r\n                        {typeof getIn(\r\n                          errors,\r\n                          `questions.${questionIndex}.options`\r\n                        ) === \"string\" ? (\r\n                          <div className=\"centered error-msg\">\r\n                            <h4>\r\n                              {getIn(\r\n                                errors,\r\n                                `questions.${questionIndex}.options`\r\n                              )}\r\n                            </h4>\r\n                          </div>\r\n                        ) : null}\r\n\r\n                        <FieldArray name={`questions.${questionIndex}.options`}>\r\n                          {(arrayHelpers) =>\r\n                            question.options.map((option, optionIndex) => {\r\n                              return (\r\n                                <div key={option.id} className=\"mt-3 mb-4\">\r\n                                  <div className=\"list-group-item\">\r\n                                    <div className=\"form-group\">\r\n                                      <CustomField\r\n                                        name={`questions.${questionIndex}.options.${optionIndex}.title`}\r\n                                        withCloseButton={{\r\n                                          onDelete: deleteOptionHandler.bind(\r\n                                            null,\r\n                                            question.id,\r\n                                            option.id,\r\n                                            setValues\r\n                                          ),\r\n                                        }}\r\n                                        label={`Odpoveď ${optionIndex + 1}`}\r\n                                        onChange={(e: any) => {\r\n                                          onChangeHandler(\r\n                                            e,\r\n                                            FieldObjType.OPTION_TITLE,\r\n                                            `questions.${questionIndex}.options.${optionIndex}.title`,\r\n                                            setValues,\r\n                                            handleChange,\r\n                                            question.id,\r\n                                            option.id\r\n                                          );\r\n                                        }}\r\n                                        error={getError(\r\n                                          `questions.${questionIndex}.options.${optionIndex}.title`\r\n                                        )}\r\n                                      />\r\n                                      <div className=\"mt-2\">\r\n                                        <label\r\n                                          htmlFor={`questions.${questionIndex}.options.${optionIndex}`}\r\n                                          className=\"me-3 form-label\"\r\n                                        >\r\n                                          Správna odpoveď\r\n                                        </label>\r\n                                        {\r\n                                          <input\r\n                                            name={`option${questionIndex}`}\r\n                                            id={`questions.${questionIndex}.options.${optionIndex}`}\r\n                                            type={`${\r\n                                              question.type ===\r\n                                                TestQuestionType.MULTIPLE_CHOICES ||\r\n                                              question.type ===\r\n                                                TestQuestionType.INPUT\r\n                                                ? \"checkbox\"\r\n                                                : \"radio\"\r\n                                            }`}\r\n                                            checked={option.isCorrect}\r\n                                            disabled={\r\n                                              question.type ===\r\n                                              TestQuestionType.INPUT\r\n                                                ? true\r\n                                                : false\r\n                                            }\r\n                                            onClick={(e) => {\r\n                                              if (\r\n                                                question.type ===\r\n                                                  TestQuestionType.SINGLE_CHOICE &&\r\n                                                question.options.length > 1 &&\r\n                                                question.options.every(\r\n                                                  (opt) => opt.isCorrect\r\n                                                )\r\n                                              ) {\r\n                                                onChangeHandler(\r\n                                                  e,\r\n                                                  FieldObjType.OPTION_CORRECT,\r\n                                                  `questions.${questionIndex}.options.${optionIndex}.correct`,\r\n                                                  setValues,\r\n                                                  handleChange,\r\n                                                  question.id,\r\n                                                  option.id\r\n                                                );\r\n                                              }\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                              onChangeHandler(\r\n                                                e,\r\n                                                FieldObjType.OPTION_CORRECT,\r\n                                                `questions.${questionIndex}.options.${optionIndex}.correct`,\r\n                                                setValues,\r\n                                                handleChange,\r\n                                                question.id,\r\n                                                option.id\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                        }\r\n                                      </div>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              );\r\n                            })\r\n                          }\r\n                        </FieldArray>\r\n\r\n                        {/* no correct option selected error  */}\r\n                        {question.options.length > 0 &&\r\n                          question.options.every(\r\n                            (opt) => opt.isCorrect === false\r\n                          ) &&\r\n                          getIn(errors, `optNotSelected`) && (\r\n                            <div className=\"centered error-msg\">\r\n                              <h5>{getIn(errors, `optNotSelected`)}</h5>\r\n                            </div>\r\n                          )}\r\n\r\n                        {/* button that adds new option */}\r\n                        <div className=\"centered my-1 mb-3\">\r\n                          <Button\r\n                            className=\"width-25-991-60\"\r\n                            variant=\"secondary\"\r\n                            onClick={() => {\r\n                              addOptionHandler(question.id);\r\n                              setValues(formData);\r\n                            }}\r\n                          >\r\n                            Pridať odpoveď\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })\r\n              }\r\n            </FieldArray>\r\n\r\n            {/* button that adds new question */}\r\n            <div className=\"centered mt-4 mb-3\">\r\n              <Button\r\n                className=\"width-35-991-80\"\r\n                onClick={() => {\r\n                  addQuestionHandler();\r\n                  setValues(formData);\r\n                }}\r\n              >\r\n                Pridať Otázku\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"text-center mt-4 mb-2\">\r\n            <Button\r\n              className=\"width-50-991-100\"\r\n              type=\"submit\"\r\n              variant={`${\r\n                props.submitBtnVariant ? props.submitBtnVariant : \"success\"\r\n              }`}\r\n            >\r\n              {props.submitBtnText}\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default TestForm;\r\n","import { Field, ErrorMessage } from \"formik\";\r\nimport { CloseButton } from \"react-bootstrap\";\r\n\r\ntype Props = {\r\n  label: string;\r\n  name: string;\r\n  type?: string;\r\n  placeholder?: string;\r\n  className?: string;\r\n  onChange: (e: any) => void;\r\n  error?: boolean;\r\n  as?: string;\r\n  withCloseButton?: {onDelete: () => void};\r\n};\r\n\r\nconst CustomField: React.FC<Props> = (props) => {\r\n  return (\r\n    <div>\r\n      <h5 className=\"card-title\">\r\n        {props.label}\r\n        {props.withCloseButton && (\r\n          <CloseButton\r\n            className=\"float-end\"\r\n            onClick={props.withCloseButton.onDelete}\r\n          />\r\n        )}\r\n      </h5>\r\n      <Field\r\n        name={props.name}\r\n        as={props.as ? props.as : \"\"}\r\n        type={`${props.type ? props.type : \"text\"}`}\r\n        step={props.type === 'number' ? 0.5 : ''}\r\n        placeholder={props.placeholder}\r\n        className={`form-control ${props.error ? \"is-invalid\" : \"\"} ${\r\n          props.className\r\n        }`}\r\n        onChange={(e: any) => {props.onChange(e)}}\r\n      >\r\n        {props.children}\r\n      </Field>\r\n      <ErrorMessage name={props.name}>\r\n        {(msg) => <div className=\"error-msg mt-2\">{msg}</div>}\r\n      </ErrorMessage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomField;\r\n","import React, { useContext } from 'react';\r\nimport { Accordion, ListGroup } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport TestClass from '../../models/TestClass';\r\nimport { UserRole } from '../../models/User';\r\nimport TestContext from '../../store/test-context';\r\nimport OptionIcon from '../../assets/icons/OptionsIcon';\r\nimport ConfirmDialogButton from '../UI/ConfirmDialogButton';\r\nimport ModalFormButton from '../UI/ModalFormButton';\r\nimport ProtectedComponent from '../UI/ProtectedComponent';\r\nimport TestForm from './TestForm';\r\n\r\ntype Props = {\r\n  tests: TestClass[];\r\n};\r\n\r\nconst TestList: React.FC<Props> = (props) => {\r\n  const testCtx = useContext(TestContext);\r\n\r\n  const getMaxPointsCount = (test: TestClass): number => {\r\n    let sum = 0;\r\n    test.questions.forEach((question) => (sum += +question.points));\r\n    return sum;\r\n  };\r\n\r\n  return (\r\n    <ListGroup className=\"maxwidth-720\">\r\n      <Accordion>\r\n        {props.tests.map((test) => (\r\n          <Accordion.Item eventKey={'' + test.id} key={test.id}>\r\n            <Accordion.Header>\r\n              <p className=\"h4 m-0\">{test.title}</p>\r\n            </Accordion.Header>\r\n            <Accordion.Body>\r\n              <ProtectedComponent\r\n                requiredRole={[UserRole.ADMIN, UserRole.TEACHER]}\r\n              >\r\n                <div className=\" d-flex flex-column d-md-block float-md-end\">\r\n                  <ModalFormButton\r\n                    btnTitle=\"Upraviť\"\r\n                    modalTitle=\"Úprava existujúceho testu\"\r\n                    btnVariant=\"warning\"\r\n                    icon={<OptionIcon />}\r\n                    className={'me-md-2'}\r\n                  >\r\n                    <TestForm\r\n                      onSubmit={testCtx.modifyTest.bind(null, test.id)}\r\n                      submitBtnText=\"Potvrdiť zmeny\"\r\n                      formField={test}\r\n                    />\r\n                  </ModalFormButton>\r\n\r\n                  <ConfirmDialogButton\r\n                    confirmBtnTitle=\"Vymazať\"\r\n                    className=\"mb-2 mt-2 mb-md-0 mt-md-0\"\r\n                    title=\"Vymazanie testu\"\r\n                    headerTitle=\"Naozaj chcete vymazať tento test?\"\r\n                    onConfirm={testCtx.deleteTest.bind(null, test.id)}\r\n                  />\r\n                </div>\r\n              </ProtectedComponent>\r\n              <p>\r\n                {`Názov: ${test.title}`}\r\n                <br />\r\n                {`Počet otázok: ${test.questions.length}`}\r\n                <br />\r\n                {`Maximálny počet bodov: ${getMaxPointsCount(test)}`}\r\n              </p>\r\n\r\n              <div className=\"text-center\">\r\n                <Link\r\n                  className=\"width-responsive btn btn-primary\"\r\n                  to={`/tests/${test.id}`}\r\n                >\r\n                  Písať test\r\n                </Link>\r\n              </div>\r\n            </Accordion.Body>\r\n          </Accordion.Item>\r\n        ))}\r\n      </Accordion>\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport ModalLayout from \"../components/Layout/ModalLayout\";\r\nimport TestForm from \"../components/tests/TestForm\";\r\nimport TestList from \"../components/tests/TestList\";\r\nimport ContainerWrapper from \"../components/Layout/ContainerWrapper\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport ProtectedComponent from \"../components/UI/ProtectedComponent\";\r\nimport TestClass from \"../models/TestClass\";\r\nimport { UserRole } from \"../models/User\";\r\nimport TestContext from \"../store/test-context\";\r\n\r\nconst TestListPage: React.FC = () => {\r\n  const testCtx = useContext(TestContext);\r\n\r\n  const { error, opStatus: status, tests } = testCtx.data;\r\n  const fetchAll = testCtx.fetchAll;\r\n\r\n  const [isShown, setIsShown] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    fetchAll();\r\n  }, [fetchAll]);\r\n\r\n  let output;\r\n\r\n  const modalFormButton = (\r\n    <ProtectedComponent requiredRole={[UserRole.ADMIN, UserRole.TEACHER]}>\r\n      <div className=\"centered\">\r\n        <Button onClick={() => setIsShown(true)}>Vytvoriť nový test</Button>\r\n        <ModalLayout\r\n          title={\"Vytvorenie nového Testu\"}\r\n          backdropType={\"static\"}\r\n          show={isShown}\r\n          onHide={() => setIsShown(false)}\r\n        >\r\n          <TestForm\r\n            onSubmit={(data: TestClass) => {\r\n              testCtx.saveTest(data);\r\n              setIsShown(false);\r\n            }}\r\n            submitBtnText=\"Vytvoriť test\"\r\n          />\r\n        </ModalLayout>\r\n      </div>\r\n    </ProtectedComponent>\r\n  );\r\n\r\n  if (status === \"Pending\") {\r\n    output = (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || status === \"Failure\") {\r\n    output = <p className=\"centered h4 error-msg\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"Finished\" && (!tests || tests.length === 0)) {\r\n    output = (\r\n      <>\r\n        <div className=\"centered\">\r\n          <p className=\"h4\">Žiadne testy neboli nájdené</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (status === \"Finished\" && !error && tests && tests.length > 0) {\r\n    output = (\r\n      <>\r\n        <div className=\"maxwidth-720\">\r\n          <TestList tests={tests} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ContainerWrapper>\r\n      <Row>\r\n        <Col>\r\n          <div className=\"centered\">\r\n            <h2 className=\"display-2 txt-main\">Zoznam Testov</h2>\r\n          </div>\r\n          {modalFormButton}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>{output}</Col>\r\n      </Row>\r\n    </ContainerWrapper>\r\n  );\r\n};\r\n\r\nexport default TestListPage;\r\n"],"names":["FieldObjType","props","className","label","withCloseButton","CloseButton","onClick","onDelete","name","as","type","step","placeholder","error","onChange","e","children","msg","useState","formField","TestClass","TestQuestionClass","Math","random","TestQuestionType","QuestionOptionClass","formData","setFormData","deleteQuestionHandler","questionId","setValues","state","newState","questions","filter","question","id","deleteOptionHandler","optionId","questionIndex","findIndex","q","options","option","onChangeHandler","event","field","fieldName","handleChange","value","currentTarget","TEST_TITLE","title","at","OPTION_TITLE","OPTION_CORRECT","forEach","opt","isCorrect","checked","QUESTION_TITLE","QUESTION_POINTS","points","QUESTION_TYPE","validationSchema","Yup","shape","required","of","min","correct","max","initialValues","enableReinitialize","validateOnBlur","validate","values","errors","validateSync","abortEarly","inner","reduce","path","message","some","every","o","optNotSelected","onSubmit","touched","setErrors","arrayHelpers","map","getError","getIn","bind","optionIndex","htmlFor","disabled","length","Button","variant","push","submitBtnVariant","submitBtnText","testCtx","useContext","TestContext","getMaxPointsCount","test","sum","ListGroup","Accordion","tests","eventKey","ProtectedComponent","requiredRole","UserRole","ModalFormButton","btnTitle","modalTitle","btnVariant","icon","modifyTest","ConfirmDialogButton","confirmBtnTitle","headerTitle","onConfirm","deleteTest","to","output","data","status","opStatus","fetchAll","isShown","setIsShown","useEffect","modalFormButton","ModalLayout","backdropType","show","onHide","saveTest","LoadingSpinner","ContainerWrapper","Row","Col"],"sourceRoot":""}